//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeFluentEntities.Bencher.Sales
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Tuesday, 18 March 2014 16:33.
    // Build:1.0.61214.0764
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0764")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, SalesOrderNumber={SalesOrderNumber}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    public partial class SalesOrderHeader : System.ICloneable, System.IComparable, System.IComparable<CodeFluentEntities.Bencher.Sales.SalesOrderHeader>, CodeFluent.Runtime.ICodeFluentEntity, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<CodeFluentEntities.Bencher.Sales.SalesOrderHeader>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private int _salesOrderID = -1;
        
        private byte _revisionNumber = 0;
        
        private System.DateTime _orderDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private System.DateTime _dueDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private System.Nullable<System.DateTime> _shipDate = null;
        
        private byte _status = 1;
        
        private bool _onlineOrderFlag = true;
        
        private string _salesOrderNumber = default(string);
        
        private string _purchaseOrderNumber = default(string);
        
        private string _accountNumber = default(string);
        
        private System.Nullable<int> _salesPersonID = null;
        
        private int _billToAddressID = CodeFluentPersistence.DefaultInt32Value;
        
        private int _shipToAddressID = CodeFluentPersistence.DefaultInt32Value;
        
        private string _creditCardApprovalCode = default(string);
        
        private decimal _subTotal = 0.00m;
        
        private decimal _taxAmt = 0.00m;
        
        private decimal _freight = 0.00m;
        
        private decimal _totalDue = CodeFluentPersistence.DefaultDecimalValue;
        
        private string _comment = default(string);
        
        private System.Guid _rowguid = CodeFluentPersistence.DefaultGuidValue;
        
        private System.DateTime _modifiedDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private int _creditCardCreditCardID = -1;
        
        [System.NonSerializedAttribute()]
        private CodeFluentEntities.Bencher.Sales.CreditCard _creditCard = null;
        
        private int _shipMethodShipMethodID = -1;
        
        [System.NonSerializedAttribute()]
        private CodeFluentEntities.Bencher.Purchasing.ShipMethod _shipMethod = null;
        
        private int _customerCustomerID = -1;
        
        [System.NonSerializedAttribute()]
        private CodeFluentEntities.Bencher.Sales.Customer _customer = null;
        
        private int _salesTerritoryTerritoryID = -1;
        
        [System.NonSerializedAttribute()]
        private CodeFluentEntities.Bencher.Sales.SalesTerritory _salesTerritory = null;
        
        private int _currencyRateCurrencyRateID = -1;
        
        [System.NonSerializedAttribute()]
        private CodeFluentEntities.Bencher.Sales.CurrencyRate _currencyRate = null;
        
        public SalesOrderHeader()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                return this.SalesOrderID.ToString();
            }
            set
            {
                this.SalesOrderID = ((int)(ConvertUtilities.ChangeType(value, typeof(int), -1)));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.SalesOrderNumber;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((int)(-1)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int SalesOrderID
        {
            get
            {
                return this._salesOrderID;
            }
            set
            {
                this._salesOrderID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("SalesOrderID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((byte)(0)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(byte))]
        public byte RevisionNumber
        {
            get
            {
                return this._revisionNumber;
            }
            set
            {
                this._revisionNumber = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RevisionNumber"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime OrderDate
        {
            get
            {
                return this._orderDate;
            }
            set
            {
                this._orderDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("OrderDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                this._dueDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("DueDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ShipDate
        {
            get
            {
                return this._shipDate;
            }
            set
            {
                this._shipDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ShipDate"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((byte)(1)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(byte))]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                this._status = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Status"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((bool)(true)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(bool))]
        public bool OnlineOrderFlag
        {
            get
            {
                return this._onlineOrderFlag;
            }
            set
            {
                this._onlineOrderFlag = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("OnlineOrderFlag"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string SalesOrderNumber
        {
            get
            {
                return this._salesOrderNumber;
            }
            set
            {
                this._salesOrderNumber = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("SalesOrderNumber"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string PurchaseOrderNumber
        {
            get
            {
                return this._purchaseOrderNumber;
            }
            set
            {
                this._purchaseOrderNumber = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("PurchaseOrderNumber"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string AccountNumber
        {
            get
            {
                return this._accountNumber;
            }
            set
            {
                this._accountNumber = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("AccountNumber"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> SalesPersonID
        {
            get
            {
                return this._salesPersonID;
            }
            set
            {
                this._salesPersonID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("SalesPersonID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int BillToAddressID
        {
            get
            {
                return this._billToAddressID;
            }
            set
            {
                this._billToAddressID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("BillToAddressID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int ShipToAddressID
        {
            get
            {
                return this._shipToAddressID;
            }
            set
            {
                this._shipToAddressID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ShipToAddressID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string CreditCardApprovalCode
        {
            get
            {
                return this._creditCardApprovalCode;
            }
            set
            {
                this._creditCardApprovalCode = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CreditCardApprovalCode"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal SubTotal
        {
            get
            {
                return this._subTotal;
            }
            set
            {
                this._subTotal = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("SubTotal"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal TaxAmt
        {
            get
            {
                return this._taxAmt;
            }
            set
            {
                this._taxAmt = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("TaxAmt"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal Freight
        {
            get
            {
                return this._freight;
            }
            set
            {
                this._freight = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Freight"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal TotalDue
        {
            get
            {
                return this._totalDue;
            }
            set
            {
                this._totalDue = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("TotalDue"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                this._comment = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Comment"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.Guid))]
        public System.Guid Rowguid
        {
            get
            {
                return this._rowguid;
            }
            set
            {
                this._rowguid = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Rowguid"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this._modifiedDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModifiedDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int CreditCardCreditCardID
        {
            get
            {
                if (((this._creditCardCreditCardID == -1) 
                            && (this._creditCard != null)))
                {
                    this._creditCardCreditCardID = this._creditCard.CreditCardID;
                }
                return this._creditCardCreditCardID;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.CreditCardCreditCardID) == true))
                {
                    return;
                }
                this._creditCard = null;
                this._creditCardCreditCardID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CreditCard"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CreditCardCreditCardID"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public CodeFluentEntities.Bencher.Sales.CreditCard CreditCard
        {
            get
            {
                if ((this._creditCard == null))
                {
                    this._creditCard = CodeFluentEntities.Bencher.Sales.CreditCard.Load(this._creditCardCreditCardID);
                }
                return this._creditCard;
            }
            set
            {
                this._creditCardCreditCardID = -1;
                this._creditCard = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CreditCard"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CreditCardCreditCardID"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int ShipMethodShipMethodID
        {
            get
            {
                if (((this._shipMethodShipMethodID == -1) 
                            && (this._shipMethod != null)))
                {
                    this._shipMethodShipMethodID = this._shipMethod.ShipMethodID;
                }
                return this._shipMethodShipMethodID;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.ShipMethodShipMethodID) == true))
                {
                    return;
                }
                this._shipMethod = null;
                this._shipMethodShipMethodID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ShipMethod"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ShipMethodShipMethodID"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public CodeFluentEntities.Bencher.Purchasing.ShipMethod ShipMethod
        {
            get
            {
                if ((this._shipMethod == null))
                {
                    this._shipMethod = CodeFluentEntities.Bencher.Purchasing.ShipMethod.Load(this._shipMethodShipMethodID);
                }
                return this._shipMethod;
            }
            set
            {
                this._shipMethodShipMethodID = -1;
                this._shipMethod = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ShipMethod"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ShipMethodShipMethodID"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int CustomerCustomerID
        {
            get
            {
                if (((this._customerCustomerID == -1) 
                            && (this._customer != null)))
                {
                    this._customerCustomerID = this._customer.CustomerID;
                }
                return this._customerCustomerID;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.CustomerCustomerID) == true))
                {
                    return;
                }
                this._customer = null;
                this._customerCustomerID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Customer"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CustomerCustomerID"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public CodeFluentEntities.Bencher.Sales.Customer Customer
        {
            get
            {
                if ((this._customer == null))
                {
                    this._customer = CodeFluentEntities.Bencher.Sales.Customer.Load(this._customerCustomerID);
                }
                return this._customer;
            }
            set
            {
                this._customerCustomerID = -1;
                this._customer = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Customer"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CustomerCustomerID"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int SalesTerritoryTerritoryID
        {
            get
            {
                if (((this._salesTerritoryTerritoryID == -1) 
                            && (this._salesTerritory != null)))
                {
                    this._salesTerritoryTerritoryID = this._salesTerritory.TerritoryID;
                }
                return this._salesTerritoryTerritoryID;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.SalesTerritoryTerritoryID) == true))
                {
                    return;
                }
                this._salesTerritory = null;
                this._salesTerritoryTerritoryID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("SalesTerritory"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("SalesTerritoryTerritoryID"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public CodeFluentEntities.Bencher.Sales.SalesTerritory SalesTerritory
        {
            get
            {
                if ((this._salesTerritory == null))
                {
                    this._salesTerritory = CodeFluentEntities.Bencher.Sales.SalesTerritory.Load(this._salesTerritoryTerritoryID);
                }
                return this._salesTerritory;
            }
            set
            {
                this._salesTerritoryTerritoryID = -1;
                this._salesTerritory = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("SalesTerritory"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("SalesTerritoryTerritoryID"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int CurrencyRateCurrencyRateID
        {
            get
            {
                if (((this._currencyRateCurrencyRateID == -1) 
                            && (this._currencyRate != null)))
                {
                    this._currencyRateCurrencyRateID = this._currencyRate.CurrencyRateID;
                }
                return this._currencyRateCurrencyRateID;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.CurrencyRateCurrencyRateID) == true))
                {
                    return;
                }
                this._currencyRate = null;
                this._currencyRateCurrencyRateID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CurrencyRate"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CurrencyRateCurrencyRateID"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public CodeFluentEntities.Bencher.Sales.CurrencyRate CurrencyRate
        {
            get
            {
                if ((this._currencyRate == null))
                {
                    this._currencyRate = CodeFluentEntities.Bencher.Sales.CurrencyRate.Load(this._currencyRateCurrencyRateID);
                }
                return this._currencyRate;
            }
            set
            {
                this._currencyRateCurrencyRateID = -1;
                this._currencyRate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CurrencyRate"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CurrencyRateCurrencyRateID"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(CodeFluentEntities.Bencher.Sales.SalesOrderHeader salesOrderHeader)
        {
            if ((salesOrderHeader == null))
            {
                return false;
            }
            if ((this.SalesOrderID == -1))
            {
                return base.Equals(salesOrderHeader);
            }
            return (this.SalesOrderID.Equals(salesOrderHeader.SalesOrderID) == true);
        }
        
        public override int GetHashCode()
        {
            return this._salesOrderID;
        }
        
        public override bool Equals(object obj)
        {
            CodeFluentEntities.Bencher.Sales.SalesOrderHeader salesOrderHeader = null;
			salesOrderHeader = obj as CodeFluentEntities.Bencher.Sales.SalesOrderHeader;
            return this.Equals(salesOrderHeader);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            CodeFluentEntities.Bencher.Sales.SalesOrderHeader salesOrderHeader = null;
salesOrderHeader = value as CodeFluentEntities.Bencher.Sales.SalesOrderHeader;
            if ((salesOrderHeader == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(salesOrderHeader);
            return localCompareTo;
        }
        
        public virtual int CompareTo(CodeFluentEntities.Bencher.Sales.SalesOrderHeader salesOrderHeader)
        {
            if ((salesOrderHeader == null))
            {
                throw new System.ArgumentNullException("salesOrderHeader");
            }
            int localCompareTo = this.SalesOrderID.CompareTo(salesOrderHeader.SalesOrderID);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = CodeFluentEntities.Bencher.Resources.Manager.GetStringWithDefault(culture, "CodeFluentEntities.Bencher.Sales.SalesOrderHeader.ExternalValidate", "Type \'CodeFluentEntities.Bencher.Sales.SalesOrderHeader\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Sales", "SalesOrderHeader", "Delete");
            persistence.AddRawParameter("@SalesOrderID", this.SalesOrderID);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._salesOrderID = CodeFluentPersistence.GetReaderValue(reader, "SalesOrderID", ((int)(-1)));
                this._revisionNumber = CodeFluentPersistence.GetReaderValue(reader, "RevisionNumber", ((byte)(0)));
                this._orderDate = CodeFluentPersistence.GetReaderValue(reader, "OrderDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._dueDate = CodeFluentPersistence.GetReaderValue(reader, "DueDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._shipDate = CodeFluentPersistence.GetReaderValue<System.DateTime>(reader, "ShipDate");
                this._status = CodeFluentPersistence.GetReaderValue(reader, "Status", ((byte)(1)));
                this._onlineOrderFlag = CodeFluentPersistence.GetReaderValue(reader, "OnlineOrderFlag", ((bool)(true)));
                this._salesOrderNumber = CodeFluentPersistence.GetReaderValue(reader, "SalesOrderNumber", ((string)(default(string))));
                this._purchaseOrderNumber = CodeFluentPersistence.GetReaderValue(reader, "PurchaseOrderNumber", ((string)(default(string))));
                this._accountNumber = CodeFluentPersistence.GetReaderValue(reader, "AccountNumber", ((string)(default(string))));
                this._salesPersonID = CodeFluentPersistence.GetReaderValue<int>(reader, "SalesPersonID");
                this._billToAddressID = CodeFluentPersistence.GetReaderValue(reader, "BillToAddressID", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._shipToAddressID = CodeFluentPersistence.GetReaderValue(reader, "ShipToAddressID", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._creditCardApprovalCode = CodeFluentPersistence.GetReaderValue(reader, "CreditCardApprovalCode", ((string)(default(string))));
                this._subTotal = CodeFluentPersistence.GetReaderValue(reader, "SubTotal", ((decimal)(0.00m)));
                this._taxAmt = CodeFluentPersistence.GetReaderValue(reader, "TaxAmt", ((decimal)(0.00m)));
                this._freight = CodeFluentPersistence.GetReaderValue(reader, "Freight", ((decimal)(0.00m)));
                this._totalDue = CodeFluentPersistence.GetReaderValue(reader, "TotalDue", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
                this._comment = CodeFluentPersistence.GetReaderValue(reader, "Comment", ((string)(default(string))));
                this._rowguid = CodeFluentPersistence.GetReaderValue(reader, "rowguid", ((System.Guid)(CodeFluentPersistence.DefaultGuidValue)));
                this._modifiedDate = CodeFluentPersistence.GetReaderValue(reader, "ModifiedDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this.CreditCardCreditCardID = CodeFluentPersistence.GetReaderValue(reader, "CreditCardID", ((int)(-1)));
                this.ShipMethodShipMethodID = CodeFluentPersistence.GetReaderValue(reader, "ShipMethodID", ((int)(-1)));
                this.CustomerCustomerID = CodeFluentPersistence.GetReaderValue(reader, "CustomerID", ((int)(-1)));
                this.SalesTerritoryTerritoryID = CodeFluentPersistence.GetReaderValue(reader, "TerritoryID", ((int)(-1)));
                this.CurrencyRateCurrencyRateID = CodeFluentPersistence.GetReaderValue(reader, "CurrencyRateID", ((int)(-1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this._salesOrderID = CodeFluentPersistence.GetReaderValue(reader, "SalesOrderID", ((int)(-1)));
            this._salesOrderNumber = CodeFluentPersistence.GetReaderValue(reader, "SalesOrderNumber", ((string)(default(string))));
            this._totalDue = CodeFluentPersistence.GetReaderValue(reader, "TotalDue", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Sales.SalesOrderHeader Load(int salesOrderID)
        {
            if ((salesOrderID == -1))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Sales.SalesOrderHeader salesOrderHeader = new CodeFluentEntities.Bencher.Sales.SalesOrderHeader();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Sales", "SalesOrderHeader", "Load");
            persistence.AddRawParameter("@SalesOrderID", salesOrderID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    salesOrderHeader.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    salesOrderHeader.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return salesOrderHeader;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((this.SalesOrderID == -1))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Sales", "SalesOrderHeader", "Load");
            persistence.AddRawParameter("@SalesOrderID", this.SalesOrderID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Sales", "SalesOrderHeader", "Save");
            persistence.AddRawParameter("@SalesOrderID", this.SalesOrderID);
            persistence.AddRawParameter("@RevisionNumber", this.RevisionNumber);
            persistence.AddRawParameter("@OrderDate", this.OrderDate);
            persistence.AddRawParameter("@DueDate", this.DueDate);
            persistence.AddParameter("@ShipDate", this.ShipDate);
            persistence.AddRawParameter("@Status", this.Status);
            persistence.AddRawParameter("@OnlineOrderFlag", this.OnlineOrderFlag);
            persistence.AddRawParameter("@PurchaseOrderNumber", this.PurchaseOrderNumber);
            persistence.AddRawParameter("@AccountNumber", this.AccountNumber);
            persistence.AddParameter("@SalesPersonID", this.SalesPersonID);
            persistence.AddRawParameter("@BillToAddressID", this.BillToAddressID);
            persistence.AddRawParameter("@ShipToAddressID", this.ShipToAddressID);
            persistence.AddRawParameter("@CreditCardApprovalCode", this.CreditCardApprovalCode);
            persistence.AddRawParameter("@SubTotal", this.SubTotal);
            persistence.AddRawParameter("@TaxAmt", this.TaxAmt);
            persistence.AddRawParameter("@Freight", this.Freight);
            persistence.AddRawParameter("@Comment", this.Comment);
            persistence.AddRawParameter("@rowguid", this.Rowguid);
            persistence.AddRawParameter("@ModifiedDate", this.ModifiedDate);
            persistence.AddRawParameter("@CreditCardID", this.CreditCardCreditCardID);
            persistence.AddRawParameter("@ShipMethodID", this.ShipMethodShipMethodID);
            persistence.AddRawParameter("@CustomerID", this.CustomerCustomerID);
            persistence.AddRawParameter("@TerritoryID", this.SalesTerritoryTerritoryID);
            persistence.AddRawParameter("@CurrencyRateID", this.CurrencyRateCurrencyRateID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(CodeFluentEntities.Bencher.Sales.SalesOrderHeader salesOrderHeader)
        {
            if ((salesOrderHeader == null))
            {
                return false;
            }
            bool ret = salesOrderHeader.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(CodeFluentEntities.Bencher.Sales.SalesOrderHeader salesOrderHeader)
        {
            bool ret = CodeFluentEntities.Bencher.Sales.SalesOrderHeader.Save(salesOrderHeader);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(CodeFluentEntities.Bencher.Sales.SalesOrderHeader salesOrderHeader)
        {
            if ((salesOrderHeader == null))
            {
                return false;
            }
            bool ret = salesOrderHeader.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("SalesOrderID=");
            writer.Write(this.SalesOrderID);
            writer.Write(",");
            writer.Write("RevisionNumber=");
            writer.Write(this.RevisionNumber);
            writer.Write(",");
            writer.Write("OrderDate=");
            writer.Write(this.OrderDate);
            writer.Write(",");
            writer.Write("DueDate=");
            writer.Write(this.DueDate);
            writer.Write(",");
            writer.Write("ShipDate=");
            writer.Write(this.ShipDate);
            writer.Write(",");
            writer.Write("Status=");
            writer.Write(this.Status);
            writer.Write(",");
            writer.Write("OnlineOrderFlag=");
            writer.Write(this.OnlineOrderFlag);
            writer.Write(",");
            writer.Write("SalesOrderNumber=");
            writer.Write(this.SalesOrderNumber);
            writer.Write(",");
            writer.Write("PurchaseOrderNumber=");
            writer.Write(this.PurchaseOrderNumber);
            writer.Write(",");
            writer.Write("AccountNumber=");
            writer.Write(this.AccountNumber);
            writer.Write(",");
            writer.Write("SalesPersonID=");
            writer.Write(this.SalesPersonID);
            writer.Write(",");
            writer.Write("BillToAddressID=");
            writer.Write(this.BillToAddressID);
            writer.Write(",");
            writer.Write("ShipToAddressID=");
            writer.Write(this.ShipToAddressID);
            writer.Write(",");
            writer.Write("CreditCardApprovalCode=");
            writer.Write(this.CreditCardApprovalCode);
            writer.Write(",");
            writer.Write("SubTotal=");
            writer.Write(this.SubTotal);
            writer.Write(",");
            writer.Write("TaxAmt=");
            writer.Write(this.TaxAmt);
            writer.Write(",");
            writer.Write("Freight=");
            writer.Write(this.Freight);
            writer.Write(",");
            writer.Write("TotalDue=");
            writer.Write(this.TotalDue);
            writer.Write(",");
            writer.Write("Comment=");
            writer.Write(this.Comment);
            writer.Write(",");
            writer.Write("Rowguid=");
            writer.Write(this.Rowguid);
            writer.Write(",");
            writer.Write("ModifiedDate=");
            writer.Write(this.ModifiedDate);
            writer.Write(",");
            writer.Write("CreditCard=");
            if ((this._creditCard != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._creditCard)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_creditCardCreditCardID=");
            writer.Write(this._creditCardCreditCardID);
            writer.Write(",");
            writer.Write("ShipMethod=");
            if ((this._shipMethod != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._shipMethod)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_shipMethodShipMethodID=");
            writer.Write(this._shipMethodShipMethodID);
            writer.Write(",");
            writer.Write("Customer=");
            if ((this._customer != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._customer)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_customerCustomerID=");
            writer.Write(this._customerCustomerID);
            writer.Write(",");
            writer.Write("SalesTerritory=");
            if ((this._salesTerritory != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._salesTerritory)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_salesTerritoryTerritoryID=");
            writer.Write(this._salesTerritoryTerritoryID);
            writer.Write(",");
            writer.Write("CurrencyRate=");
            if ((this._currencyRate != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._currencyRate)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_currencyRateCurrencyRateID=");
            writer.Write(this._currencyRateCurrencyRateID);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Sales.SalesOrderHeader LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Sales.SalesOrderHeader salesOrderHeader;
            int var = ((int)(ConvertUtilities.ChangeType(key, typeof(int), -1)));
            salesOrderHeader = CodeFluentEntities.Bencher.Sales.SalesOrderHeader.Load(var);
            return salesOrderHeader;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public CodeFluentEntities.Bencher.Sales.SalesOrderHeader Clone(bool deep)
        {
            CodeFluentEntities.Bencher.Sales.SalesOrderHeader salesOrderHeader = new CodeFluentEntities.Bencher.Sales.SalesOrderHeader();
            this.CopyTo(salesOrderHeader, deep);
            return salesOrderHeader;
        }
        
        public CodeFluentEntities.Bencher.Sales.SalesOrderHeader Clone()
        {
            CodeFluentEntities.Bencher.Sales.SalesOrderHeader localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("SalesOrderID") == true))
            {
                this.SalesOrderID = ((int)(ConvertUtilities.ChangeType(dict["SalesOrderID"], typeof(int), -1)));
            }
            if ((dict.Contains("SubTotal") == true))
            {
                this.SubTotal = ((decimal)(ConvertUtilities.ChangeType(dict["SubTotal"], typeof(decimal), 0.00m)));
            }
            if ((dict.Contains("TaxAmt") == true))
            {
                this.TaxAmt = ((decimal)(ConvertUtilities.ChangeType(dict["TaxAmt"], typeof(decimal), 0.00m)));
            }
            if ((dict.Contains("CreditCardApprovalCode") == true))
            {
                this.CreditCardApprovalCode = ((string)(ConvertUtilities.ChangeType(dict["CreditCardApprovalCode"], typeof(string), default(string))));
            }
            if ((dict.Contains("BillToAddressID") == true))
            {
                this.BillToAddressID = ((int)(ConvertUtilities.ChangeType(dict["BillToAddressID"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("ShipToAddressID") == true))
            {
                this.ShipToAddressID = ((int)(ConvertUtilities.ChangeType(dict["ShipToAddressID"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("Rowguid") == true))
            {
                this.Rowguid = ((System.Guid)(ConvertUtilities.ChangeType(dict["Rowguid"], typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            }
            if ((dict.Contains("ModifiedDate") == true))
            {
                this.ModifiedDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["ModifiedDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("Comment") == true))
            {
                this.Comment = ((string)(ConvertUtilities.ChangeType(dict["Comment"], typeof(string), default(string))));
            }
            if ((dict.Contains("Freight") == true))
            {
                this.Freight = ((decimal)(ConvertUtilities.ChangeType(dict["Freight"], typeof(decimal), 0.00m)));
            }
            if ((dict.Contains("TotalDue") == true))
            {
                this.TotalDue = ((decimal)(ConvertUtilities.ChangeType(dict["TotalDue"], typeof(decimal), CodeFluentPersistence.DefaultDecimalValue)));
            }
            if ((dict.Contains("ShipDate") == true))
            {
                this.ShipDate = ((System.Nullable<System.DateTime>)(ConvertUtilities.ChangeType(dict["ShipDate"], typeof(System.Nullable<System.DateTime>), null)));
            }
            if ((dict.Contains("Status") == true))
            {
                this.Status = ((byte)(ConvertUtilities.ChangeType(dict["Status"], typeof(byte), 1)));
            }
            if ((dict.Contains("DueDate") == true))
            {
                this.DueDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["DueDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("RevisionNumber") == true))
            {
                this.RevisionNumber = ((byte)(ConvertUtilities.ChangeType(dict["RevisionNumber"], typeof(byte), 0)));
            }
            if ((dict.Contains("OrderDate") == true))
            {
                this.OrderDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["OrderDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("AccountNumber") == true))
            {
                this.AccountNumber = ((string)(ConvertUtilities.ChangeType(dict["AccountNumber"], typeof(string), default(string))));
            }
            if ((dict.Contains("SalesPersonID") == true))
            {
                this.SalesPersonID = ((System.Nullable<System.Int32>)(ConvertUtilities.ChangeType(dict["SalesPersonID"], typeof(System.Nullable<System.Int32>), null)));
            }
            if ((dict.Contains("PurchaseOrderNumber") == true))
            {
                this.PurchaseOrderNumber = ((string)(ConvertUtilities.ChangeType(dict["PurchaseOrderNumber"], typeof(string), default(string))));
            }
            if ((dict.Contains("OnlineOrderFlag") == true))
            {
                this.OnlineOrderFlag = ((bool)(ConvertUtilities.ChangeType(dict["OnlineOrderFlag"], typeof(bool), true)));
            }
            if ((dict.Contains("SalesOrderNumber") == true))
            {
                this.SalesOrderNumber = ((string)(ConvertUtilities.ChangeType(dict["SalesOrderNumber"], typeof(string), default(string))));
            }
            if ((dict.Contains("SalesTerritoryTerritoryID") == true))
            {
                this.SalesTerritoryTerritoryID = ((int)(ConvertUtilities.ChangeType(dict["SalesTerritoryTerritoryID"], typeof(int), -1)));
            }
            if ((dict.Contains("CurrencyRateCurrencyRateID") == true))
            {
                this.CurrencyRateCurrencyRateID = ((int)(ConvertUtilities.ChangeType(dict["CurrencyRateCurrencyRateID"], typeof(int), -1)));
            }
            if ((dict.Contains("CustomerCustomerID") == true))
            {
                this.CustomerCustomerID = ((int)(ConvertUtilities.ChangeType(dict["CustomerCustomerID"], typeof(int), -1)));
            }
            if ((dict.Contains("CreditCardCreditCardID") == true))
            {
                this.CreditCardCreditCardID = ((int)(ConvertUtilities.ChangeType(dict["CreditCardCreditCardID"], typeof(int), -1)));
            }
            if ((dict.Contains("ShipMethodShipMethodID") == true))
            {
                this.ShipMethodShipMethodID = ((int)(ConvertUtilities.ChangeType(dict["ShipMethodShipMethodID"], typeof(int), -1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(CodeFluentEntities.Bencher.Sales.SalesOrderHeader salesOrderHeader, bool deep)
        {
            if ((salesOrderHeader == null))
            {
                throw new System.ArgumentNullException("salesOrderHeader");
            }
            salesOrderHeader.SalesOrderID = this.SalesOrderID;
            salesOrderHeader.SubTotal = this.SubTotal;
            salesOrderHeader.TaxAmt = this.TaxAmt;
            salesOrderHeader.CreditCardApprovalCode = this.CreditCardApprovalCode;
            salesOrderHeader.BillToAddressID = this.BillToAddressID;
            salesOrderHeader.ShipToAddressID = this.ShipToAddressID;
            salesOrderHeader.Rowguid = this.Rowguid;
            salesOrderHeader.ModifiedDate = this.ModifiedDate;
            salesOrderHeader.Comment = this.Comment;
            salesOrderHeader.Freight = this.Freight;
            salesOrderHeader.TotalDue = this.TotalDue;
            salesOrderHeader.ShipDate = this.ShipDate;
            salesOrderHeader.Status = this.Status;
            salesOrderHeader.DueDate = this.DueDate;
            salesOrderHeader.RevisionNumber = this.RevisionNumber;
            salesOrderHeader.OrderDate = this.OrderDate;
            salesOrderHeader.AccountNumber = this.AccountNumber;
            salesOrderHeader.SalesPersonID = this.SalesPersonID;
            salesOrderHeader.PurchaseOrderNumber = this.PurchaseOrderNumber;
            salesOrderHeader.OnlineOrderFlag = this.OnlineOrderFlag;
            salesOrderHeader.SalesOrderNumber = this.SalesOrderNumber;
            salesOrderHeader.SalesTerritoryTerritoryID = this.SalesTerritoryTerritoryID;
            salesOrderHeader.CurrencyRateCurrencyRateID = this.CurrencyRateCurrencyRateID;
            salesOrderHeader.CustomerCustomerID = this.CustomerCustomerID;
            salesOrderHeader.CreditCardCreditCardID = this.CreditCardCreditCardID;
            salesOrderHeader.ShipMethodShipMethodID = this.ShipMethodShipMethodID;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, salesOrderHeader));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["SalesOrderID"] = this.SalesOrderID;
            dict["SubTotal"] = this.SubTotal;
            dict["TaxAmt"] = this.TaxAmt;
            dict["CreditCardApprovalCode"] = this.CreditCardApprovalCode;
            dict["BillToAddressID"] = this.BillToAddressID;
            dict["ShipToAddressID"] = this.ShipToAddressID;
            dict["Rowguid"] = this.Rowguid;
            dict["ModifiedDate"] = this.ModifiedDate;
            dict["Comment"] = this.Comment;
            dict["Freight"] = this.Freight;
            dict["TotalDue"] = this.TotalDue;
            dict["ShipDate"] = this.ShipDate;
            dict["Status"] = this.Status;
            dict["DueDate"] = this.DueDate;
            dict["RevisionNumber"] = this.RevisionNumber;
            dict["OrderDate"] = this.OrderDate;
            dict["AccountNumber"] = this.AccountNumber;
            dict["SalesPersonID"] = this.SalesPersonID;
            dict["PurchaseOrderNumber"] = this.PurchaseOrderNumber;
            dict["OnlineOrderFlag"] = this.OnlineOrderFlag;
            dict["SalesOrderNumber"] = this.SalesOrderNumber;
            dict["SalesTerritoryTerritoryID"] = this.SalesTerritoryTerritoryID;
            dict["CurrencyRateCurrencyRateID"] = this.CurrencyRateCurrencyRateID;
            dict["CustomerCustomerID"] = this.CustomerCustomerID;
            dict["CreditCardCreditCardID"] = this.CreditCardCreditCardID;
            dict["ShipMethodShipMethodID"] = this.ShipMethodShipMethodID;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
        
        internal void FastReadRecord(System.Data.IDataReader reader, int[] indices)
        {
            this._salesOrderID = reader.GetInt32(indices[0]);
            this._revisionNumber = reader.GetByte(indices[1]);
            this._orderDate = reader.GetDateTime(indices[2]);
            this._dueDate = reader.GetDateTime(indices[3]);
          
            if ((reader.IsDBNull(4) == false))
            {
                this._shipDate = reader.GetDateTime(indices[4]);
            }
            this._status = reader.GetByte(indices[5]);
            this._onlineOrderFlag = reader.GetBoolean(indices[6]);
            if ((reader.IsDBNull(7) == false))
            {
                this._salesOrderNumber = reader.GetString(indices[7]);
            }
            if ((reader.IsDBNull(8) == false))
            {
                this._purchaseOrderNumber = reader.GetString(indices[8]);
            }
            if ((reader.IsDBNull(9) == false))
            {
                this._accountNumber = reader.GetString(indices[9]);
            }
            if ((reader.IsDBNull(10) == false))
            {
                this._salesPersonID = reader.GetInt32(indices[10]);
            }
            this._billToAddressID = reader.GetInt32(indices[11]);
            this._shipToAddressID = reader.GetInt32(indices[12]);
            if ((reader.IsDBNull(13) == false))
            {
                this._creditCardApprovalCode = reader.GetString(indices[13]);
            }
            this._subTotal = reader.GetDecimal(indices[14]);
            this._taxAmt = reader.GetDecimal(indices[15]);
            this._freight = reader.GetDecimal(indices[16]);
            this._totalDue = reader.GetDecimal(indices[17]);
            if ((reader.IsDBNull(18) == false))
            {
                this._comment = reader.GetString(indices[18]);
            }
            this._rowguid = reader.GetGuid(indices[19]);
            this._modifiedDate = reader.GetDateTime(indices[20]);
            if ((reader.IsDBNull(21) == false))
            {
                this.CreditCardCreditCardID = reader.GetInt32(indices[21]);
            }
            this.ShipMethodShipMethodID = reader.GetInt32(indices[22]);
            this.CustomerCustomerID = reader.GetInt32(indices[23]);
            if ((reader.IsDBNull(24) == false))
            {
                this.SalesTerritoryTerritoryID = reader.GetInt32(indices[24]);
            }
            if ((reader.IsDBNull(25) == false))
            {
                this.CurrencyRateCurrencyRateID = reader.GetInt32(indices[25]);
            }
        }
        
        internal static int[] GetRecordIndices(System.Data.IDataReader reader)
        {
            int[] indices = new int[26];
            indices[0] = reader.GetOrdinal("SalesOrderID");
            indices[1] = reader.GetOrdinal("RevisionNumber");
            indices[2] = reader.GetOrdinal("OrderDate");
            indices[3] = reader.GetOrdinal("DueDate");
            indices[4] = reader.GetOrdinal("ShipDate");
            indices[5] = reader.GetOrdinal("Status");
            indices[6] = reader.GetOrdinal("OnlineOrderFlag");
            indices[7] = reader.GetOrdinal("SalesOrderNumber");
            indices[8] = reader.GetOrdinal("PurchaseOrderNumber");
            indices[9] = reader.GetOrdinal("AccountNumber");
            indices[10] = reader.GetOrdinal("SalesPersonID");
            indices[11] = reader.GetOrdinal("BillToAddressID");
            indices[12] = reader.GetOrdinal("ShipToAddressID");
            indices[13] = reader.GetOrdinal("CreditCardApprovalCode");
            indices[14] = reader.GetOrdinal("SubTotal");
            indices[15] = reader.GetOrdinal("TaxAmt");
            indices[16] = reader.GetOrdinal("Freight");
            indices[17] = reader.GetOrdinal("TotalDue");
            indices[18] = reader.GetOrdinal("Comment");
            indices[19] = reader.GetOrdinal("rowguid");
            indices[20] = reader.GetOrdinal("ModifiedDate");
            indices[21] = reader.GetOrdinal("CreditCardID");
            indices[22] = reader.GetOrdinal("ShipMethodID");
            indices[23] = reader.GetOrdinal("CustomerID");
            indices[24] = reader.GetOrdinal("TerritoryID");
            indices[25] = reader.GetOrdinal("CurrencyRateID");
            return indices;
        }
    }
}
