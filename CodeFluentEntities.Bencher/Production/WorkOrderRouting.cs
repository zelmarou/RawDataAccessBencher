//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeFluentEntities.Bencher.Production
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Tuesday, 18 March 2014 16:33.
    // Build:1.0.61214.0764
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0764")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, WorkOrderID={WorkOrderID}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    public partial class WorkOrderRouting : System.ICloneable, System.IComparable, System.IComparable<CodeFluentEntities.Bencher.Production.WorkOrderRouting>, CodeFluent.Runtime.ICodeFluentEntity, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<CodeFluentEntities.Bencher.Production.WorkOrderRouting>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private int _workOrderID = CodeFluentPersistence.DefaultInt32Value;
        
        private int _productID = CodeFluentPersistence.DefaultInt32Value;
        
        private short _operationSequence = CodeFluentPersistence.DefaultInt16Value;
        
        private System.DateTime _scheduledStartDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private System.DateTime _scheduledEndDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private System.Nullable<System.DateTime> _actualStartDate = null;
        
        private System.Nullable<System.DateTime> _actualEndDate = null;
        
        private System.Nullable<decimal> _actualResourceHrs = null;
        
        private decimal _plannedCost = CodeFluentPersistence.DefaultDecimalValue;
        
        private System.Nullable<decimal> _actualCost = null;
        
        private System.DateTime _modifiedDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private short _locationLocationID = -1;
        
        [System.NonSerializedAttribute()]
        private CodeFluentEntities.Bencher.Production.Location _location = null;
        
        public WorkOrderRouting()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                object[] keys = new object[] {
                        this.WorkOrderID,
                        this.ProductID,
                        this.OperationSequence};
                string v = CodeFluentPersistence.BuildEntityKey(keys);
                return v;
            }
            set
            {
                System.Type[] types = new System.Type[] {
                        typeof(int),
                        typeof(int),
                        typeof(short)};
                object[] defaultValues = new object[] {
                        CodeFluentPersistence.DefaultInt32Value,
                        CodeFluentPersistence.DefaultInt32Value,
                        CodeFluentPersistence.DefaultInt16Value};
                object[] v1 = CodeFluentPersistence.ParseEntityKey(value, types, defaultValues);
                this.WorkOrderID = ((int)(v1[0]));
                this.ProductID = ((int)(v1[1]));
                this.OperationSequence = ((short)(v1[2]));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.WorkOrderID.ToString();
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int WorkOrderID
        {
            get
            {
                return this._workOrderID;
            }
            set
            {
                this._workOrderID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("WorkOrderID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                this._productID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ProductID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt16Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(short))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public short OperationSequence
        {
            get
            {
                return this._operationSequence;
            }
            set
            {
                this._operationSequence = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("OperationSequence"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime ScheduledStartDate
        {
            get
            {
                return this._scheduledStartDate;
            }
            set
            {
                this._scheduledStartDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ScheduledStartDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime ScheduledEndDate
        {
            get
            {
                return this._scheduledEndDate;
            }
            set
            {
                this._scheduledEndDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ScheduledEndDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ActualStartDate
        {
            get
            {
                return this._actualStartDate;
            }
            set
            {
                this._actualStartDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ActualStartDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ActualEndDate
        {
            get
            {
                return this._actualEndDate;
            }
            set
            {
                this._actualEndDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ActualEndDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> ActualResourceHrs
        {
            get
            {
                return this._actualResourceHrs;
            }
            set
            {
                this._actualResourceHrs = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ActualResourceHrs"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal PlannedCost
        {
            get
            {
                return this._plannedCost;
            }
            set
            {
                this._plannedCost = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("PlannedCost"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> ActualCost
        {
            get
            {
                return this._actualCost;
            }
            set
            {
                this._actualCost = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ActualCost"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this._modifiedDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModifiedDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public short LocationLocationID
        {
            get
            {
                if (((this._locationLocationID == -1) 
                            && (this._location != null)))
                {
                    this._locationLocationID = this._location.LocationID;
                }
                return this._locationLocationID;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<short>.Default.Equals(value, this.LocationLocationID) == true))
                {
                    return;
                }
                this._location = null;
                this._locationLocationID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Location"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LocationLocationID"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public CodeFluentEntities.Bencher.Production.Location Location
        {
            get
            {
                if ((this._location == null))
                {
                    this._location = CodeFluentEntities.Bencher.Production.Location.Load(this._locationLocationID);
                }
                return this._location;
            }
            set
            {
                this._locationLocationID = -1;
                this._location = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Location"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LocationLocationID"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(CodeFluentEntities.Bencher.Production.WorkOrderRouting workOrderRouting)
        {
            if ((workOrderRouting == null))
            {
                return false;
            }
            if ((((this.WorkOrderID == CodeFluentPersistence.DefaultInt32Value) 
                        || (this.ProductID == CodeFluentPersistence.DefaultInt32Value)) 
                        || (this.OperationSequence == CodeFluentPersistence.DefaultInt16Value)))
            {
                return base.Equals(workOrderRouting);
            }
            return (((this.WorkOrderID.Equals(workOrderRouting.WorkOrderID) && this.ProductID.Equals(workOrderRouting.ProductID)) 
                        && this.OperationSequence.Equals(workOrderRouting.OperationSequence)) 
                        == true);
        }
        
        public override int GetHashCode()
        {
            if ((this.EntityKey == null))
            {
                return base.GetHashCode();
            }
            return this.EntityKey.GetHashCode();
        }
        
        public override bool Equals(object obj)
        {
            CodeFluentEntities.Bencher.Production.WorkOrderRouting workOrderRouting = null;
			workOrderRouting = obj as CodeFluentEntities.Bencher.Production.WorkOrderRouting;
            return this.Equals(workOrderRouting);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            CodeFluentEntities.Bencher.Production.WorkOrderRouting workOrderRouting = null;
workOrderRouting = value as CodeFluentEntities.Bencher.Production.WorkOrderRouting;
            if ((workOrderRouting == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(workOrderRouting);
            return localCompareTo;
        }
        
        public virtual int CompareTo(CodeFluentEntities.Bencher.Production.WorkOrderRouting workOrderRouting)
        {
            if ((workOrderRouting == null))
            {
                throw new System.ArgumentNullException("workOrderRouting");
            }
            int localCompareTo = this.WorkOrderID.CompareTo(workOrderRouting.WorkOrderID);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = CodeFluentEntities.Bencher.Resources.Manager.GetStringWithDefault(culture, "CodeFluentEntities.Bencher.Production.WorkOrderRouting.ExternalValidate", "Type \'CodeFluentEntities.Bencher.Production.WorkOrderRouting\' cannot be validated" +
                            ".", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Production", "WorkOrderRouting", "Delete");
            persistence.AddRawParameter("@WorkOrderID", this.WorkOrderID);
            persistence.AddRawParameter("@ProductID", this.ProductID);
            persistence.AddRawParameter("@OperationSequence", this.OperationSequence);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._workOrderID = CodeFluentPersistence.GetReaderValue(reader, "WorkOrderID", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._productID = CodeFluentPersistence.GetReaderValue(reader, "ProductID", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._operationSequence = CodeFluentPersistence.GetReaderValue(reader, "OperationSequence", ((short)(CodeFluentPersistence.DefaultInt16Value)));
                this._scheduledStartDate = CodeFluentPersistence.GetReaderValue(reader, "ScheduledStartDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._scheduledEndDate = CodeFluentPersistence.GetReaderValue(reader, "ScheduledEndDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._actualStartDate = CodeFluentPersistence.GetReaderValue<System.DateTime>(reader, "ActualStartDate");
                this._actualEndDate = CodeFluentPersistence.GetReaderValue<System.DateTime>(reader, "ActualEndDate");
                this._actualResourceHrs = CodeFluentPersistence.GetReaderValue<decimal>(reader, "ActualResourceHrs");
                this._plannedCost = CodeFluentPersistence.GetReaderValue(reader, "PlannedCost", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
                this._actualCost = CodeFluentPersistence.GetReaderValue<decimal>(reader, "ActualCost");
                this._modifiedDate = CodeFluentPersistence.GetReaderValue(reader, "ModifiedDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this.LocationLocationID = CodeFluentPersistence.GetReaderValue(reader, "LocationID", ((short)(-1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Production.WorkOrderRouting Load(int workOrderID, int productID, short operationSequence)
        {
            if ((workOrderID == CodeFluentPersistence.DefaultInt32Value))
            {
                return null;
            }
            if ((productID == CodeFluentPersistence.DefaultInt32Value))
            {
                return null;
            }
            if ((operationSequence == CodeFluentPersistence.DefaultInt16Value))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Production.WorkOrderRouting workOrderRouting = new CodeFluentEntities.Bencher.Production.WorkOrderRouting();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Production", "WorkOrderRouting", "Load");
            persistence.AddRawParameter("@WorkOrderID", workOrderID);
            persistence.AddRawParameter("@ProductID", productID);
            persistence.AddRawParameter("@OperationSequence", operationSequence);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    workOrderRouting.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    workOrderRouting.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return workOrderRouting;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((((this.WorkOrderID == CodeFluentPersistence.DefaultInt32Value) 
                        || (this.ProductID == CodeFluentPersistence.DefaultInt32Value)) 
                        || (this.OperationSequence == CodeFluentPersistence.DefaultInt16Value)))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Production", "WorkOrderRouting", "Load");
            persistence.AddRawParameter("@WorkOrderID", this.WorkOrderID);
            persistence.AddRawParameter("@ProductID", this.ProductID);
            persistence.AddRawParameter("@OperationSequence", this.OperationSequence);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Production", "WorkOrderRouting", "Save");
            persistence.AddRawParameter("@WorkOrderID", this.WorkOrderID);
            persistence.AddRawParameter("@ProductID", this.ProductID);
            persistence.AddRawParameter("@OperationSequence", this.OperationSequence);
            persistence.AddRawParameter("@ScheduledStartDate", this.ScheduledStartDate);
            persistence.AddRawParameter("@ScheduledEndDate", this.ScheduledEndDate);
            persistence.AddParameter("@ActualStartDate", this.ActualStartDate);
            persistence.AddParameter("@ActualEndDate", this.ActualEndDate);
            persistence.AddParameter("@ActualResourceHrs", this.ActualResourceHrs);
            persistence.AddRawParameter("@PlannedCost", this.PlannedCost);
            persistence.AddParameter("@ActualCost", this.ActualCost);
            persistence.AddRawParameter("@ModifiedDate", this.ModifiedDate);
            persistence.AddRawParameter("@LocationID", this.LocationLocationID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(CodeFluentEntities.Bencher.Production.WorkOrderRouting workOrderRouting)
        {
            if ((workOrderRouting == null))
            {
                return false;
            }
            bool ret = workOrderRouting.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(CodeFluentEntities.Bencher.Production.WorkOrderRouting workOrderRouting)
        {
            bool ret = CodeFluentEntities.Bencher.Production.WorkOrderRouting.Save(workOrderRouting);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(CodeFluentEntities.Bencher.Production.WorkOrderRouting workOrderRouting)
        {
            if ((workOrderRouting == null))
            {
                return false;
            }
            bool ret = workOrderRouting.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("WorkOrderID=");
            writer.Write(this.WorkOrderID);
            writer.Write(",");
            writer.Write("ProductID=");
            writer.Write(this.ProductID);
            writer.Write(",");
            writer.Write("OperationSequence=");
            writer.Write(this.OperationSequence);
            writer.Write(",");
            writer.Write("ScheduledStartDate=");
            writer.Write(this.ScheduledStartDate);
            writer.Write(",");
            writer.Write("ScheduledEndDate=");
            writer.Write(this.ScheduledEndDate);
            writer.Write(",");
            writer.Write("ActualStartDate=");
            writer.Write(this.ActualStartDate);
            writer.Write(",");
            writer.Write("ActualEndDate=");
            writer.Write(this.ActualEndDate);
            writer.Write(",");
            writer.Write("ActualResourceHrs=");
            writer.Write(this.ActualResourceHrs);
            writer.Write(",");
            writer.Write("PlannedCost=");
            writer.Write(this.PlannedCost);
            writer.Write(",");
            writer.Write("ActualCost=");
            writer.Write(this.ActualCost);
            writer.Write(",");
            writer.Write("ModifiedDate=");
            writer.Write(this.ModifiedDate);
            writer.Write(",");
            writer.Write("Location=");
            if ((this._location != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._location)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_locationLocationID=");
            writer.Write(this._locationLocationID);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Production.WorkOrderRouting LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Production.WorkOrderRouting workOrderRouting;
            System.Type[] types = new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(short)};
            object[] defaultValues = new object[] {
                    CodeFluentPersistence.DefaultInt32Value,
                    CodeFluentPersistence.DefaultInt32Value,
                    CodeFluentPersistence.DefaultInt16Value};
            object[] v = CodeFluentPersistence.ParseEntityKey(key, types, defaultValues);
            int var0;
            var0 = ((int)(v[0]));
            int var1;
            var1 = ((int)(v[1]));
            short var2;
            var2 = ((short)(v[2]));
            workOrderRouting = CodeFluentEntities.Bencher.Production.WorkOrderRouting.Load(var0, var1, var2);
            return workOrderRouting;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public CodeFluentEntities.Bencher.Production.WorkOrderRouting Clone(bool deep)
        {
            CodeFluentEntities.Bencher.Production.WorkOrderRouting workOrderRouting = new CodeFluentEntities.Bencher.Production.WorkOrderRouting();
            this.CopyTo(workOrderRouting, deep);
            return workOrderRouting;
        }
        
        public CodeFluentEntities.Bencher.Production.WorkOrderRouting Clone()
        {
            CodeFluentEntities.Bencher.Production.WorkOrderRouting localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("OperationSequence") == true))
            {
                this.OperationSequence = ((short)(ConvertUtilities.ChangeType(dict["OperationSequence"], typeof(short), CodeFluentPersistence.DefaultInt16Value)));
            }
            if ((dict.Contains("ProductID") == true))
            {
                this.ProductID = ((int)(ConvertUtilities.ChangeType(dict["ProductID"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("WorkOrderID") == true))
            {
                this.WorkOrderID = ((int)(ConvertUtilities.ChangeType(dict["WorkOrderID"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("PlannedCost") == true))
            {
                this.PlannedCost = ((decimal)(ConvertUtilities.ChangeType(dict["PlannedCost"], typeof(decimal), CodeFluentPersistence.DefaultDecimalValue)));
            }
            if ((dict.Contains("ActualResourceHrs") == true))
            {
                this.ActualResourceHrs = ((System.Nullable<System.Decimal>)(ConvertUtilities.ChangeType(dict["ActualResourceHrs"], typeof(System.Nullable<System.Decimal>), null)));
            }
            if ((dict.Contains("ModifiedDate") == true))
            {
                this.ModifiedDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["ModifiedDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("ActualCost") == true))
            {
                this.ActualCost = ((System.Nullable<System.Decimal>)(ConvertUtilities.ChangeType(dict["ActualCost"], typeof(System.Nullable<System.Decimal>), null)));
            }
            if ((dict.Contains("ScheduledEndDate") == true))
            {
                this.ScheduledEndDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["ScheduledEndDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("ScheduledStartDate") == true))
            {
                this.ScheduledStartDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["ScheduledStartDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("ActualEndDate") == true))
            {
                this.ActualEndDate = ((System.Nullable<System.DateTime>)(ConvertUtilities.ChangeType(dict["ActualEndDate"], typeof(System.Nullable<System.DateTime>), null)));
            }
            if ((dict.Contains("ActualStartDate") == true))
            {
                this.ActualStartDate = ((System.Nullable<System.DateTime>)(ConvertUtilities.ChangeType(dict["ActualStartDate"], typeof(System.Nullable<System.DateTime>), null)));
            }
            if ((dict.Contains("LocationLocationID") == true))
            {
                this.LocationLocationID = ((short)(ConvertUtilities.ChangeType(dict["LocationLocationID"], typeof(short), -1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(CodeFluentEntities.Bencher.Production.WorkOrderRouting workOrderRouting, bool deep)
        {
            if ((workOrderRouting == null))
            {
                throw new System.ArgumentNullException("workOrderRouting");
            }
            workOrderRouting.OperationSequence = this.OperationSequence;
            workOrderRouting.ProductID = this.ProductID;
            workOrderRouting.WorkOrderID = this.WorkOrderID;
            workOrderRouting.PlannedCost = this.PlannedCost;
            workOrderRouting.ActualResourceHrs = this.ActualResourceHrs;
            workOrderRouting.ModifiedDate = this.ModifiedDate;
            workOrderRouting.ActualCost = this.ActualCost;
            workOrderRouting.ScheduledEndDate = this.ScheduledEndDate;
            workOrderRouting.ScheduledStartDate = this.ScheduledStartDate;
            workOrderRouting.ActualEndDate = this.ActualEndDate;
            workOrderRouting.ActualStartDate = this.ActualStartDate;
            workOrderRouting.LocationLocationID = this.LocationLocationID;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, workOrderRouting));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["OperationSequence"] = this.OperationSequence;
            dict["ProductID"] = this.ProductID;
            dict["WorkOrderID"] = this.WorkOrderID;
            dict["PlannedCost"] = this.PlannedCost;
            dict["ActualResourceHrs"] = this.ActualResourceHrs;
            dict["ModifiedDate"] = this.ModifiedDate;
            dict["ActualCost"] = this.ActualCost;
            dict["ScheduledEndDate"] = this.ScheduledEndDate;
            dict["ScheduledStartDate"] = this.ScheduledStartDate;
            dict["ActualEndDate"] = this.ActualEndDate;
            dict["ActualStartDate"] = this.ActualStartDate;
            dict["LocationLocationID"] = this.LocationLocationID;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
    }
}
