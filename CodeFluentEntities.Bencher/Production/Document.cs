//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeFluentEntities.Bencher.Production
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Tuesday, 18 March 2014 16:33.
    // Build:1.0.61214.0764
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0764")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, Title={Title}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    public partial class Document : System.ICloneable, System.IComparable, System.IComparable<CodeFluentEntities.Bencher.Production.Document>, CodeFluent.Runtime.ICodeFluentEntity, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<CodeFluentEntities.Bencher.Production.Document>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private byte[] _documentNode = default(byte[]);
        
        private System.Nullable<short> _documentLevel = null;
        
        private string _title = default(string);
        
        private int _owner = CodeFluentPersistence.DefaultInt32Value;
        
        private bool _folderFlag = false;
        
        private string _fileName = default(string);
        
        private string _fileExtension = default(string);
        
        private string _revision = default(string);
        
        private int _changeNumber = 0;
        
        private byte _status = CodeFluentPersistence.DefaultByteValue;
        
        private string _documentSummary = default(string);
        
        private byte[] _document1 = default(byte[]);
        
        private System.Guid _rowguid = CodeFluentPersistence.DefaultGuidValue;
        
        private System.DateTime _modifiedDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        public Document()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                return this.Title;
            }
            set
            {
                this.Title = value;
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.Title;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(byte[]))]
        public byte[] DocumentNode
        {
            get
            {
                return this._documentNode;
            }
            set
            {
                this._documentNode = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("DocumentNode"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<short> DocumentLevel
        {
            get
            {
                return this._documentLevel;
            }
            set
            {
                this._documentLevel = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("DocumentLevel"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                this._title = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Title"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                this._owner = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Owner"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((bool)(false)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(bool))]
        public bool FolderFlag
        {
            get
            {
                return this._folderFlag;
            }
            set
            {
                this._folderFlag = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FolderFlag"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string FileName
        {
            get
            {
                return this._fileName;
            }
            set
            {
                this._fileName = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FileName"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string FileExtension
        {
            get
            {
                return this._fileExtension;
            }
            set
            {
                this._fileExtension = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FileExtension"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string Revision
        {
            get
            {
                return this._revision;
            }
            set
            {
                this._revision = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Revision"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((int)(0)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int ChangeNumber
        {
            get
            {
                return this._changeNumber;
            }
            set
            {
                this._changeNumber = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ChangeNumber"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultByteValue)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(byte))]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                this._status = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Status"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string DocumentSummary
        {
            get
            {
                return this._documentSummary;
            }
            set
            {
                this._documentSummary = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("DocumentSummary"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(byte[]))]
        public byte[] Document1
        {
            get
            {
                return this._document1;
            }
            set
            {
                this._document1 = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Document1"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.Guid))]
        public System.Guid Rowguid
        {
            get
            {
                return this._rowguid;
            }
            set
            {
                this._rowguid = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Rowguid"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this._modifiedDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModifiedDate"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(CodeFluentEntities.Bencher.Production.Document document)
        {
            if ((document == null))
            {
                return false;
            }
            if ((this.Title == default(string)))
            {
                return base.Equals(document);
            }
            return (this.Title.Equals(document.Title) == true);
        }
        
        public override int GetHashCode()
        {
            if ((this.Title == null))
            {
                return base.GetHashCode();
            }
            return this.Title.GetHashCode();
        }
        
        public override bool Equals(object obj)
        {
            CodeFluentEntities.Bencher.Production.Document document = null;
			document = obj as CodeFluentEntities.Bencher.Production.Document;
            return this.Equals(document);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            CodeFluentEntities.Bencher.Production.Document document = null;
document = value as CodeFluentEntities.Bencher.Production.Document;
            if ((document == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(document);
            return localCompareTo;
        }
        
        public virtual int CompareTo(CodeFluentEntities.Bencher.Production.Document document)
        {
            if ((document == null))
            {
                throw new System.ArgumentNullException("document");
            }
            int localCompareTo = this.Title.CompareTo(document.Title);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = CodeFluentEntities.Bencher.Resources.Manager.GetStringWithDefault(culture, "CodeFluentEntities.Bencher.Production.Document.ExternalValidate", "Type \'CodeFluentEntities.Bencher.Production.Document\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Production", "Document", "Delete");
            persistence.AddRawParameter("@Title", this.Title);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._documentNode = CodeFluentPersistence.GetReaderValue(reader, "DocumentNode", ((byte[])(default(byte[]))));
                this._documentLevel = CodeFluentPersistence.GetReaderValue<short>(reader, "DocumentLevel");
                this._title = CodeFluentPersistence.GetReaderValue(reader, "Title", ((string)(default(string))));
                this._owner = CodeFluentPersistence.GetReaderValue(reader, "Owner", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._folderFlag = CodeFluentPersistence.GetReaderValue(reader, "FolderFlag", ((bool)(false)));
                this._fileName = CodeFluentPersistence.GetReaderValue(reader, "FileName", ((string)(default(string))));
                this._fileExtension = CodeFluentPersistence.GetReaderValue(reader, "FileExtension", ((string)(default(string))));
                this._revision = CodeFluentPersistence.GetReaderValue(reader, "Revision", ((string)(default(string))));
                this._changeNumber = CodeFluentPersistence.GetReaderValue(reader, "ChangeNumber", ((int)(0)));
                this._status = CodeFluentPersistence.GetReaderValue(reader, "Status", ((byte)(CodeFluentPersistence.DefaultByteValue)));
                this._documentSummary = CodeFluentPersistence.GetReaderValue(reader, "DocumentSummary", ((string)(default(string))));
                this._document1 = CodeFluentPersistence.GetReaderValue(reader, "Document", ((byte[])(default(byte[]))));
                this._rowguid = CodeFluentPersistence.GetReaderValue(reader, "rowguid", ((System.Guid)(CodeFluentPersistence.DefaultGuidValue)));
                this._modifiedDate = CodeFluentPersistence.GetReaderValue(reader, "ModifiedDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this._documentLevel = CodeFluentPersistence.GetReaderValue<short>(reader, "DocumentLevel");
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Production.Document Load(string title)
        {
            if ((title == default(string)))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Production.Document document = new CodeFluentEntities.Bencher.Production.Document();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Production", "Document", "Load");
            persistence.AddRawParameter("@Title", title);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    document.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    document.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return document;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((this.Title == default(string)))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Production", "Document", "Load");
            persistence.AddRawParameter("@Title", this.Title);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Production", "Document", "Save");
            persistence.AddRawParameter("@Title", this.Title);
            persistence.AddRawParameter("@DocumentNode", this.DocumentNode);
            persistence.AddRawParameter("@Owner", this.Owner);
            persistence.AddRawParameter("@FolderFlag", this.FolderFlag);
            persistence.AddRawParameter("@FileName", this.FileName);
            persistence.AddRawParameter("@FileExtension", this.FileExtension);
            persistence.AddRawParameter("@Revision", this.Revision);
            persistence.AddRawParameter("@ChangeNumber", this.ChangeNumber);
            persistence.AddRawParameter("@Status", this.Status);
            persistence.AddRawParameter("@DocumentSummary", this.DocumentSummary);
            persistence.AddRawParameter("@Document", this.Document1);
            persistence.AddRawParameter("@rowguid", this.Rowguid);
            persistence.AddRawParameter("@ModifiedDate", this.ModifiedDate);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(CodeFluentEntities.Bencher.Production.Document document)
        {
            if ((document == null))
            {
                return false;
            }
            bool ret = document.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(CodeFluentEntities.Bencher.Production.Document document)
        {
            bool ret = CodeFluentEntities.Bencher.Production.Document.Save(document);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(CodeFluentEntities.Bencher.Production.Document document)
        {
            if ((document == null))
            {
                return false;
            }
            bool ret = document.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("DocumentNode=");
            writer.Write(this.DocumentNode);
            writer.Write(",");
            writer.Write("DocumentLevel=");
            writer.Write(this.DocumentLevel);
            writer.Write(",");
            writer.Write("Title=");
            writer.Write(this.Title);
            writer.Write(",");
            writer.Write("Owner=");
            writer.Write(this.Owner);
            writer.Write(",");
            writer.Write("FolderFlag=");
            writer.Write(this.FolderFlag);
            writer.Write(",");
            writer.Write("FileName=");
            writer.Write(this.FileName);
            writer.Write(",");
            writer.Write("FileExtension=");
            writer.Write(this.FileExtension);
            writer.Write(",");
            writer.Write("Revision=");
            writer.Write(this.Revision);
            writer.Write(",");
            writer.Write("ChangeNumber=");
            writer.Write(this.ChangeNumber);
            writer.Write(",");
            writer.Write("Status=");
            writer.Write(this.Status);
            writer.Write(",");
            writer.Write("DocumentSummary=");
            writer.Write(this.DocumentSummary);
            writer.Write(",");
            writer.Write("Document1=");
            writer.Write(this.Document1);
            writer.Write(",");
            writer.Write("Rowguid=");
            writer.Write(this.Rowguid);
            writer.Write(",");
            writer.Write("ModifiedDate=");
            writer.Write(this.ModifiedDate);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Production.Document LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Production.Document document;
            document = CodeFluentEntities.Bencher.Production.Document.Load(key);
            return document;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public CodeFluentEntities.Bencher.Production.Document Clone(bool deep)
        {
            CodeFluentEntities.Bencher.Production.Document document = new CodeFluentEntities.Bencher.Production.Document();
            this.CopyTo(document, deep);
            return document;
        }
        
        public CodeFluentEntities.Bencher.Production.Document Clone()
        {
            CodeFluentEntities.Bencher.Production.Document localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("Title") == true))
            {
                this.Title = ((string)(ConvertUtilities.ChangeType(dict["Title"], typeof(string), default(string))));
            }
            if ((dict.Contains("DocumentSummary") == true))
            {
                this.DocumentSummary = ((string)(ConvertUtilities.ChangeType(dict["DocumentSummary"], typeof(string), default(string))));
            }
            if ((dict.Contains("ChangeNumber") == true))
            {
                this.ChangeNumber = ((int)(ConvertUtilities.ChangeType(dict["ChangeNumber"], typeof(int), 0)));
            }
            if ((dict.Contains("Status") == true))
            {
                this.Status = ((byte)(ConvertUtilities.ChangeType(dict["Status"], typeof(byte), CodeFluentPersistence.DefaultByteValue)));
            }
            if ((dict.Contains("ModifiedDate") == true))
            {
                this.ModifiedDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["ModifiedDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("Rowguid") == true))
            {
                this.Rowguid = ((System.Guid)(ConvertUtilities.ChangeType(dict["Rowguid"], typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            }
            if ((dict.Contains("Document1") == true))
            {
                this.Document1 = ((byte[])(ConvertUtilities.ChangeType(dict["Document1"], typeof(byte[]), default(byte[]))));
            }
            if ((dict.Contains("Revision") == true))
            {
                this.Revision = ((string)(ConvertUtilities.ChangeType(dict["Revision"], typeof(string), default(string))));
            }
            if ((dict.Contains("Owner") == true))
            {
                this.Owner = ((int)(ConvertUtilities.ChangeType(dict["Owner"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("DocumentLevel") == true))
            {
                this.DocumentLevel = ((System.Nullable<System.Int16>)(ConvertUtilities.ChangeType(dict["DocumentLevel"], typeof(System.Nullable<System.Int16>), null)));
            }
            if ((dict.Contains("DocumentNode") == true))
            {
                this.DocumentNode = ((byte[])(ConvertUtilities.ChangeType(dict["DocumentNode"], typeof(byte[]), default(byte[]))));
            }
            if ((dict.Contains("FileExtension") == true))
            {
                this.FileExtension = ((string)(ConvertUtilities.ChangeType(dict["FileExtension"], typeof(string), default(string))));
            }
            if ((dict.Contains("FileName") == true))
            {
                this.FileName = ((string)(ConvertUtilities.ChangeType(dict["FileName"], typeof(string), default(string))));
            }
            if ((dict.Contains("FolderFlag") == true))
            {
                this.FolderFlag = ((bool)(ConvertUtilities.ChangeType(dict["FolderFlag"], typeof(bool), false)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(CodeFluentEntities.Bencher.Production.Document document, bool deep)
        {
            if ((document == null))
            {
                throw new System.ArgumentNullException("document");
            }
            document.Title = this.Title;
            document.DocumentSummary = this.DocumentSummary;
            document.ChangeNumber = this.ChangeNumber;
            document.Status = this.Status;
            document.ModifiedDate = this.ModifiedDate;
            document.Rowguid = this.Rowguid;
            document.Document1 = this.Document1;
            document.Revision = this.Revision;
            document.Owner = this.Owner;
            document.DocumentLevel = this.DocumentLevel;
            document.DocumentNode = this.DocumentNode;
            document.FileExtension = this.FileExtension;
            document.FileName = this.FileName;
            document.FolderFlag = this.FolderFlag;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, document));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["Title"] = this.Title;
            dict["DocumentSummary"] = this.DocumentSummary;
            dict["ChangeNumber"] = this.ChangeNumber;
            dict["Status"] = this.Status;
            dict["ModifiedDate"] = this.ModifiedDate;
            dict["Rowguid"] = this.Rowguid;
            dict["Document1"] = this.Document1;
            dict["Revision"] = this.Revision;
            dict["Owner"] = this.Owner;
            dict["DocumentLevel"] = this.DocumentLevel;
            dict["DocumentNode"] = this.DocumentNode;
            dict["FileExtension"] = this.FileExtension;
            dict["FileName"] = this.FileName;
            dict["FolderFlag"] = this.FolderFlag;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
    }
}
