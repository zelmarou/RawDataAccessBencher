//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeFluentEntities.Bencher.Production
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Tuesday, 18 March 2014 16:33.
    // Build:1.0.61214.0764
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0764")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, BillOfMaterialsID={BillOfMaterialsID}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    public partial class BillOfMaterial : System.ICloneable, System.IComparable, System.IComparable<CodeFluentEntities.Bencher.Production.BillOfMaterial>, CodeFluent.Runtime.ICodeFluentEntity, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<CodeFluentEntities.Bencher.Production.BillOfMaterial>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private int _billOfMaterialsID = -1;
        
        private System.Nullable<int> _productAssemblyID = null;
        
        private int _componentID = CodeFluentPersistence.DefaultInt32Value;
        
        private System.DateTime _startDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private System.Nullable<System.DateTime> _endDate = null;
        
        private short _bOMLevel = CodeFluentPersistence.DefaultInt16Value;
        
        private decimal _perAssemblyQty = 1.00m;
        
        private System.DateTime _modifiedDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private string _unitMeasureUnitMeasureCode = default(string);
        
        [System.NonSerializedAttribute()]
        private CodeFluentEntities.Bencher.Production.UnitMeasure _unitMeasure = null;
        
        public BillOfMaterial()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                return this.BillOfMaterialsID.ToString();
            }
            set
            {
                this.BillOfMaterialsID = ((int)(ConvertUtilities.ChangeType(value, typeof(int), -1)));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.BillOfMaterialsID.ToString();
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((int)(-1)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int BillOfMaterialsID
        {
            get
            {
                return this._billOfMaterialsID;
            }
            set
            {
                this._billOfMaterialsID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("BillOfMaterialsID"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ProductAssemblyID
        {
            get
            {
                return this._productAssemblyID;
            }
            set
            {
                this._productAssemblyID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ProductAssemblyID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int ComponentID
        {
            get
            {
                return this._componentID;
            }
            set
            {
                this._componentID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ComponentID"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime StartDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                this._startDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StartDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                this._endDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EndDate"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt16Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(short))]
        public short BOMLevel
        {
            get
            {
                return this._bOMLevel;
            }
            set
            {
                this._bOMLevel = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("BOMLevel"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal PerAssemblyQty
        {
            get
            {
                return this._perAssemblyQty;
            }
            set
            {
                this._perAssemblyQty = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("PerAssemblyQty"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this._modifiedDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModifiedDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public string UnitMeasureUnitMeasureCode
        {
            get
            {
                if (((this._unitMeasureUnitMeasureCode == default(string)) 
                            && (this._unitMeasure != null)))
                {
                    this._unitMeasureUnitMeasureCode = this._unitMeasure.UnitMeasureCode;
                }
                return this._unitMeasureUnitMeasureCode;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<string>.Default.Equals(value, this.UnitMeasureUnitMeasureCode) == true))
                {
                    return;
                }
                this._unitMeasure = null;
                this._unitMeasureUnitMeasureCode = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UnitMeasure"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UnitMeasureUnitMeasureCode"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public CodeFluentEntities.Bencher.Production.UnitMeasure UnitMeasure
        {
            get
            {
                if ((this._unitMeasure == null))
                {
                    this._unitMeasure = CodeFluentEntities.Bencher.Production.UnitMeasure.Load(this._unitMeasureUnitMeasureCode);
                }
                return this._unitMeasure;
            }
            set
            {
                this._unitMeasureUnitMeasureCode = default(string);
                this._unitMeasure = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UnitMeasure"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UnitMeasureUnitMeasureCode"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(CodeFluentEntities.Bencher.Production.BillOfMaterial billOfMaterial)
        {
            if ((billOfMaterial == null))
            {
                return false;
            }
            if ((this.BillOfMaterialsID == -1))
            {
                return base.Equals(billOfMaterial);
            }
            return (this.BillOfMaterialsID.Equals(billOfMaterial.BillOfMaterialsID) == true);
        }
        
        public override int GetHashCode()
        {
            return this._billOfMaterialsID;
        }
        
        public override bool Equals(object obj)
        {
            CodeFluentEntities.Bencher.Production.BillOfMaterial billOfMaterial = null;
			billOfMaterial = obj as CodeFluentEntities.Bencher.Production.BillOfMaterial;
            return this.Equals(billOfMaterial);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            CodeFluentEntities.Bencher.Production.BillOfMaterial billOfMaterial = null;
billOfMaterial = value as CodeFluentEntities.Bencher.Production.BillOfMaterial;
            if ((billOfMaterial == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(billOfMaterial);
            return localCompareTo;
        }
        
        public virtual int CompareTo(CodeFluentEntities.Bencher.Production.BillOfMaterial billOfMaterial)
        {
            if ((billOfMaterial == null))
            {
                throw new System.ArgumentNullException("billOfMaterial");
            }
            int localCompareTo = this.BillOfMaterialsID.CompareTo(billOfMaterial.BillOfMaterialsID);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = CodeFluentEntities.Bencher.Resources.Manager.GetStringWithDefault(culture, "CodeFluentEntities.Bencher.Production.BillOfMaterial.ExternalValidate", "Type \'CodeFluentEntities.Bencher.Production.BillOfMaterial\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Production", "BillOfMaterials", "Delete");
            persistence.AddRawParameter("@BillOfMaterialsID", this.BillOfMaterialsID);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._billOfMaterialsID = CodeFluentPersistence.GetReaderValue(reader, "BillOfMaterialsID", ((int)(-1)));
                this._productAssemblyID = CodeFluentPersistence.GetReaderValue<int>(reader, "ProductAssemblyID");
                this._componentID = CodeFluentPersistence.GetReaderValue(reader, "ComponentID", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._startDate = CodeFluentPersistence.GetReaderValue(reader, "StartDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._endDate = CodeFluentPersistence.GetReaderValue<System.DateTime>(reader, "EndDate");
                this._bOMLevel = CodeFluentPersistence.GetReaderValue(reader, "BOMLevel", ((short)(CodeFluentPersistence.DefaultInt16Value)));
                this._perAssemblyQty = CodeFluentPersistence.GetReaderValue(reader, "PerAssemblyQty", ((decimal)(1.00m)));
                this._modifiedDate = CodeFluentPersistence.GetReaderValue(reader, "ModifiedDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this.UnitMeasureUnitMeasureCode = CodeFluentPersistence.GetReaderValue(reader, "UnitMeasureCode", ((string)(default(string))));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this._billOfMaterialsID = CodeFluentPersistence.GetReaderValue(reader, "BillOfMaterialsID", ((int)(-1)));
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Production.BillOfMaterial Load(int billOfMaterialsID)
        {
            if ((billOfMaterialsID == -1))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Production.BillOfMaterial billOfMaterial = new CodeFluentEntities.Bencher.Production.BillOfMaterial();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Production", "BillOfMaterials", "Load");
            persistence.AddRawParameter("@BillOfMaterialsID", billOfMaterialsID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    billOfMaterial.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    billOfMaterial.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return billOfMaterial;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((this.BillOfMaterialsID == -1))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Production", "BillOfMaterials", "Load");
            persistence.AddRawParameter("@BillOfMaterialsID", this.BillOfMaterialsID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Production", "BillOfMaterials", "Save");
            persistence.AddRawParameter("@BillOfMaterialsID", this.BillOfMaterialsID);
            persistence.AddParameter("@ProductAssemblyID", this.ProductAssemblyID);
            persistence.AddRawParameter("@ComponentID", this.ComponentID);
            persistence.AddRawParameter("@StartDate", this.StartDate);
            persistence.AddParameter("@EndDate", this.EndDate);
            persistence.AddRawParameter("@BOMLevel", this.BOMLevel);
            persistence.AddRawParameter("@PerAssemblyQty", this.PerAssemblyQty);
            persistence.AddRawParameter("@ModifiedDate", this.ModifiedDate);
            persistence.AddRawParameter("@UnitMeasureCode", this.UnitMeasureUnitMeasureCode);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(CodeFluentEntities.Bencher.Production.BillOfMaterial billOfMaterial)
        {
            if ((billOfMaterial == null))
            {
                return false;
            }
            bool ret = billOfMaterial.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(CodeFluentEntities.Bencher.Production.BillOfMaterial billOfMaterial)
        {
            bool ret = CodeFluentEntities.Bencher.Production.BillOfMaterial.Save(billOfMaterial);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(CodeFluentEntities.Bencher.Production.BillOfMaterial billOfMaterial)
        {
            if ((billOfMaterial == null))
            {
                return false;
            }
            bool ret = billOfMaterial.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("BillOfMaterialsID=");
            writer.Write(this.BillOfMaterialsID);
            writer.Write(",");
            writer.Write("ProductAssemblyID=");
            writer.Write(this.ProductAssemblyID);
            writer.Write(",");
            writer.Write("ComponentID=");
            writer.Write(this.ComponentID);
            writer.Write(",");
            writer.Write("StartDate=");
            writer.Write(this.StartDate);
            writer.Write(",");
            writer.Write("EndDate=");
            writer.Write(this.EndDate);
            writer.Write(",");
            writer.Write("BOMLevel=");
            writer.Write(this.BOMLevel);
            writer.Write(",");
            writer.Write("PerAssemblyQty=");
            writer.Write(this.PerAssemblyQty);
            writer.Write(",");
            writer.Write("ModifiedDate=");
            writer.Write(this.ModifiedDate);
            writer.Write(",");
            writer.Write("UnitMeasure=");
            if ((this._unitMeasure != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._unitMeasure)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_unitMeasureUnitMeasureCode=");
            writer.Write(this._unitMeasureUnitMeasureCode);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Production.BillOfMaterial LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Production.BillOfMaterial billOfMaterial;
            int var = ((int)(ConvertUtilities.ChangeType(key, typeof(int), -1)));
            billOfMaterial = CodeFluentEntities.Bencher.Production.BillOfMaterial.Load(var);
            return billOfMaterial;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public CodeFluentEntities.Bencher.Production.BillOfMaterial Clone(bool deep)
        {
            CodeFluentEntities.Bencher.Production.BillOfMaterial billOfMaterial = new CodeFluentEntities.Bencher.Production.BillOfMaterial();
            this.CopyTo(billOfMaterial, deep);
            return billOfMaterial;
        }
        
        public CodeFluentEntities.Bencher.Production.BillOfMaterial Clone()
        {
            CodeFluentEntities.Bencher.Production.BillOfMaterial localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("BillOfMaterialsID") == true))
            {
                this.BillOfMaterialsID = ((int)(ConvertUtilities.ChangeType(dict["BillOfMaterialsID"], typeof(int), -1)));
            }
            if ((dict.Contains("BOMLevel") == true))
            {
                this.BOMLevel = ((short)(ConvertUtilities.ChangeType(dict["BOMLevel"], typeof(short), CodeFluentPersistence.DefaultInt16Value)));
            }
            if ((dict.Contains("PerAssemblyQty") == true))
            {
                this.PerAssemblyQty = ((decimal)(ConvertUtilities.ChangeType(dict["PerAssemblyQty"], typeof(decimal), 1.00m)));
            }
            if ((dict.Contains("ModifiedDate") == true))
            {
                this.ModifiedDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["ModifiedDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("EndDate") == true))
            {
                this.EndDate = ((System.Nullable<System.DateTime>)(ConvertUtilities.ChangeType(dict["EndDate"], typeof(System.Nullable<System.DateTime>), null)));
            }
            if ((dict.Contains("ProductAssemblyID") == true))
            {
                this.ProductAssemblyID = ((System.Nullable<System.Int32>)(ConvertUtilities.ChangeType(dict["ProductAssemblyID"], typeof(System.Nullable<System.Int32>), null)));
            }
            if ((dict.Contains("ComponentID") == true))
            {
                this.ComponentID = ((int)(ConvertUtilities.ChangeType(dict["ComponentID"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("StartDate") == true))
            {
                this.StartDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["StartDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("UnitMeasureUnitMeasureCode") == true))
            {
                this.UnitMeasureUnitMeasureCode = ((string)(ConvertUtilities.ChangeType(dict["UnitMeasureUnitMeasureCode"], typeof(string), default(string))));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(CodeFluentEntities.Bencher.Production.BillOfMaterial billOfMaterial, bool deep)
        {
            if ((billOfMaterial == null))
            {
                throw new System.ArgumentNullException("billOfMaterial");
            }
            billOfMaterial.BillOfMaterialsID = this.BillOfMaterialsID;
            billOfMaterial.BOMLevel = this.BOMLevel;
            billOfMaterial.PerAssemblyQty = this.PerAssemblyQty;
            billOfMaterial.ModifiedDate = this.ModifiedDate;
            billOfMaterial.EndDate = this.EndDate;
            billOfMaterial.ProductAssemblyID = this.ProductAssemblyID;
            billOfMaterial.ComponentID = this.ComponentID;
            billOfMaterial.StartDate = this.StartDate;
            billOfMaterial.UnitMeasureUnitMeasureCode = this.UnitMeasureUnitMeasureCode;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, billOfMaterial));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["BillOfMaterialsID"] = this.BillOfMaterialsID;
            dict["BOMLevel"] = this.BOMLevel;
            dict["PerAssemblyQty"] = this.PerAssemblyQty;
            dict["ModifiedDate"] = this.ModifiedDate;
            dict["EndDate"] = this.EndDate;
            dict["ProductAssemblyID"] = this.ProductAssemblyID;
            dict["ComponentID"] = this.ComponentID;
            dict["StartDate"] = this.StartDate;
            dict["UnitMeasureUnitMeasureCode"] = this.UnitMeasureUnitMeasureCode;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
    }
}
