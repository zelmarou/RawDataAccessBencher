//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeFluentEntities.Bencher.HumanResources
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Tuesday, 18 March 2014 16:33.
    // Build:1.0.61214.0764
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0764")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, NationalIDNumber={NationalIDNumber}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    public partial class Employee : System.ICloneable, System.IComparable, System.IComparable<CodeFluentEntities.Bencher.HumanResources.Employee>, CodeFluent.Runtime.ICodeFluentEntity, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<CodeFluentEntities.Bencher.HumanResources.Employee>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private int _businessEntityID = CodeFluentPersistence.DefaultInt32Value;
        
        private string _nationalIDNumber = default(string);
        
        private string _loginID = default(string);
        
        private byte[] _organizationNode = default(byte[]);
        
        private System.Nullable<short> _organizationLevel = null;
        
        private string _jobTitle = default(string);
        
        private System.DateTime _birthDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private string _maritalStatus = default(string);
        
        private string _gender = default(string);
        
        private System.DateTime _hireDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private bool _salariedFlag = true;
        
        private short _vacationHours = 0;
        
        private short _sickLeaveHours = 0;
        
        private bool _currentFlag = true;
        
        private System.Guid _rowguid = CodeFluentPersistence.DefaultGuidValue;
        
        private System.DateTime _modifiedDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        public Employee()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                return this.BusinessEntityID.ToString();
            }
            set
            {
                this.BusinessEntityID = ((int)(ConvertUtilities.ChangeType(value, typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.NationalIDNumber;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int BusinessEntityID
        {
            get
            {
                return this._businessEntityID;
            }
            set
            {
                this._businessEntityID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("BusinessEntityID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string NationalIDNumber
        {
            get
            {
                return this._nationalIDNumber;
            }
            set
            {
                this._nationalIDNumber = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("NationalIDNumber"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string LoginID
        {
            get
            {
                return this._loginID;
            }
            set
            {
                this._loginID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LoginID"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(byte[]))]
        public byte[] OrganizationNode
        {
            get
            {
                return this._organizationNode;
            }
            set
            {
                this._organizationNode = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("OrganizationNode"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<short> OrganizationLevel
        {
            get
            {
                return this._organizationLevel;
            }
            set
            {
                this._organizationLevel = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("OrganizationLevel"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string JobTitle
        {
            get
            {
                return this._jobTitle;
            }
            set
            {
                this._jobTitle = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("JobTitle"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime BirthDate
        {
            get
            {
                return this._birthDate;
            }
            set
            {
                this._birthDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("BirthDate"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string MaritalStatus
        {
            get
            {
                return this._maritalStatus;
            }
            set
            {
                this._maritalStatus = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MaritalStatus"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string Gender
        {
            get
            {
                return this._gender;
            }
            set
            {
                this._gender = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Gender"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime HireDate
        {
            get
            {
                return this._hireDate;
            }
            set
            {
                this._hireDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("HireDate"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((bool)(true)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(bool))]
        public bool SalariedFlag
        {
            get
            {
                return this._salariedFlag;
            }
            set
            {
                this._salariedFlag = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("SalariedFlag"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((short)(0)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(short))]
        public short VacationHours
        {
            get
            {
                return this._vacationHours;
            }
            set
            {
                this._vacationHours = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("VacationHours"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((short)(0)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(short))]
        public short SickLeaveHours
        {
            get
            {
                return this._sickLeaveHours;
            }
            set
            {
                this._sickLeaveHours = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("SickLeaveHours"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((bool)(true)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(bool))]
        public bool CurrentFlag
        {
            get
            {
                return this._currentFlag;
            }
            set
            {
                this._currentFlag = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CurrentFlag"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.Guid))]
        public System.Guid Rowguid
        {
            get
            {
                return this._rowguid;
            }
            set
            {
                this._rowguid = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Rowguid"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this._modifiedDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModifiedDate"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(CodeFluentEntities.Bencher.HumanResources.Employee employee)
        {
            if ((employee == null))
            {
                return false;
            }
            if ((this.BusinessEntityID == CodeFluentPersistence.DefaultInt32Value))
            {
                return base.Equals(employee);
            }
            return (this.BusinessEntityID.Equals(employee.BusinessEntityID) == true);
        }
        
        public override int GetHashCode()
        {
            return this._businessEntityID;
        }
        
        public override bool Equals(object obj)
        {
            CodeFluentEntities.Bencher.HumanResources.Employee employee = null;
			employee = obj as CodeFluentEntities.Bencher.HumanResources.Employee;
            return this.Equals(employee);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            CodeFluentEntities.Bencher.HumanResources.Employee employee = null;
employee = value as CodeFluentEntities.Bencher.HumanResources.Employee;
            if ((employee == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(employee);
            return localCompareTo;
        }
        
        public virtual int CompareTo(CodeFluentEntities.Bencher.HumanResources.Employee employee)
        {
            if ((employee == null))
            {
                throw new System.ArgumentNullException("employee");
            }
            int localCompareTo = this.BusinessEntityID.CompareTo(employee.BusinessEntityID);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = CodeFluentEntities.Bencher.Resources.Manager.GetStringWithDefault(culture, "CodeFluentEntities.Bencher.HumanResources.Employee.ExternalValidate", "Type \'CodeFluentEntities.Bencher.HumanResources.Employee\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("HumanResources", "Employee", "Delete");
            persistence.AddRawParameter("@BusinessEntityID", this.BusinessEntityID);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._businessEntityID = CodeFluentPersistence.GetReaderValue(reader, "BusinessEntityID", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._nationalIDNumber = CodeFluentPersistence.GetReaderValue(reader, "NationalIDNumber", ((string)(default(string))));
                this._loginID = CodeFluentPersistence.GetReaderValue(reader, "LoginID", ((string)(default(string))));
                this._organizationNode = CodeFluentPersistence.GetReaderValue(reader, "OrganizationNode", ((byte[])(default(byte[]))));
                this._organizationLevel = CodeFluentPersistence.GetReaderValue<short>(reader, "OrganizationLevel");
                this._jobTitle = CodeFluentPersistence.GetReaderValue(reader, "JobTitle", ((string)(default(string))));
                this._birthDate = CodeFluentPersistence.GetReaderValue(reader, "BirthDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._maritalStatus = CodeFluentPersistence.GetReaderValue(reader, "MaritalStatus", ((string)(default(string))));
                this._gender = CodeFluentPersistence.GetReaderValue(reader, "Gender", ((string)(default(string))));
                this._hireDate = CodeFluentPersistence.GetReaderValue(reader, "HireDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._salariedFlag = CodeFluentPersistence.GetReaderValue(reader, "SalariedFlag", ((bool)(true)));
                this._vacationHours = CodeFluentPersistence.GetReaderValue(reader, "VacationHours", ((short)(0)));
                this._sickLeaveHours = CodeFluentPersistence.GetReaderValue(reader, "SickLeaveHours", ((short)(0)));
                this._currentFlag = CodeFluentPersistence.GetReaderValue(reader, "CurrentFlag", ((bool)(true)));
                this._rowguid = CodeFluentPersistence.GetReaderValue(reader, "rowguid", ((System.Guid)(CodeFluentPersistence.DefaultGuidValue)));
                this._modifiedDate = CodeFluentPersistence.GetReaderValue(reader, "ModifiedDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this._organizationLevel = CodeFluentPersistence.GetReaderValue<short>(reader, "OrganizationLevel");
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.HumanResources.Employee Load(int businessEntityID)
        {
            if ((businessEntityID == CodeFluentPersistence.DefaultInt32Value))
            {
                return null;
            }
            CodeFluentEntities.Bencher.HumanResources.Employee employee = new CodeFluentEntities.Bencher.HumanResources.Employee();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("HumanResources", "Employee", "Load");
            persistence.AddRawParameter("@BusinessEntityID", businessEntityID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    employee.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    employee.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return employee;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((this.BusinessEntityID == CodeFluentPersistence.DefaultInt32Value))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("HumanResources", "Employee", "Load");
            persistence.AddRawParameter("@BusinessEntityID", this.BusinessEntityID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("HumanResources", "Employee", "Save");
            persistence.AddRawParameter("@BusinessEntityID", this.BusinessEntityID);
            persistence.AddRawParameter("@NationalIDNumber", this.NationalIDNumber);
            persistence.AddRawParameter("@LoginID", this.LoginID);
            persistence.AddRawParameter("@OrganizationNode", this.OrganizationNode);
            persistence.AddRawParameter("@JobTitle", this.JobTitle);
            persistence.AddRawParameter("@BirthDate", this.BirthDate);
            persistence.AddRawParameter("@MaritalStatus", this.MaritalStatus);
            persistence.AddRawParameter("@Gender", this.Gender);
            persistence.AddRawParameter("@HireDate", this.HireDate);
            persistence.AddRawParameter("@SalariedFlag", this.SalariedFlag);
            persistence.AddRawParameter("@VacationHours", this.VacationHours);
            persistence.AddRawParameter("@SickLeaveHours", this.SickLeaveHours);
            persistence.AddRawParameter("@CurrentFlag", this.CurrentFlag);
            persistence.AddRawParameter("@rowguid", this.Rowguid);
            persistence.AddRawParameter("@ModifiedDate", this.ModifiedDate);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(CodeFluentEntities.Bencher.HumanResources.Employee employee)
        {
            if ((employee == null))
            {
                return false;
            }
            bool ret = employee.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(CodeFluentEntities.Bencher.HumanResources.Employee employee)
        {
            bool ret = CodeFluentEntities.Bencher.HumanResources.Employee.Save(employee);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(CodeFluentEntities.Bencher.HumanResources.Employee employee)
        {
            if ((employee == null))
            {
                return false;
            }
            bool ret = employee.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("BusinessEntityID=");
            writer.Write(this.BusinessEntityID);
            writer.Write(",");
            writer.Write("NationalIDNumber=");
            writer.Write(this.NationalIDNumber);
            writer.Write(",");
            writer.Write("LoginID=");
            writer.Write(this.LoginID);
            writer.Write(",");
            writer.Write("OrganizationNode=");
            writer.Write(this.OrganizationNode);
            writer.Write(",");
            writer.Write("OrganizationLevel=");
            writer.Write(this.OrganizationLevel);
            writer.Write(",");
            writer.Write("JobTitle=");
            writer.Write(this.JobTitle);
            writer.Write(",");
            writer.Write("BirthDate=");
            writer.Write(this.BirthDate);
            writer.Write(",");
            writer.Write("MaritalStatus=");
            writer.Write(this.MaritalStatus);
            writer.Write(",");
            writer.Write("Gender=");
            writer.Write(this.Gender);
            writer.Write(",");
            writer.Write("HireDate=");
            writer.Write(this.HireDate);
            writer.Write(",");
            writer.Write("SalariedFlag=");
            writer.Write(this.SalariedFlag);
            writer.Write(",");
            writer.Write("VacationHours=");
            writer.Write(this.VacationHours);
            writer.Write(",");
            writer.Write("SickLeaveHours=");
            writer.Write(this.SickLeaveHours);
            writer.Write(",");
            writer.Write("CurrentFlag=");
            writer.Write(this.CurrentFlag);
            writer.Write(",");
            writer.Write("Rowguid=");
            writer.Write(this.Rowguid);
            writer.Write(",");
            writer.Write("ModifiedDate=");
            writer.Write(this.ModifiedDate);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.HumanResources.Employee LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            CodeFluentEntities.Bencher.HumanResources.Employee employee;
            int var = ((int)(ConvertUtilities.ChangeType(key, typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            employee = CodeFluentEntities.Bencher.HumanResources.Employee.Load(var);
            return employee;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public CodeFluentEntities.Bencher.HumanResources.Employee Clone(bool deep)
        {
            CodeFluentEntities.Bencher.HumanResources.Employee employee = new CodeFluentEntities.Bencher.HumanResources.Employee();
            this.CopyTo(employee, deep);
            return employee;
        }
        
        public CodeFluentEntities.Bencher.HumanResources.Employee Clone()
        {
            CodeFluentEntities.Bencher.HumanResources.Employee localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("BusinessEntityID") == true))
            {
                this.BusinessEntityID = ((int)(ConvertUtilities.ChangeType(dict["BusinessEntityID"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("VacationHours") == true))
            {
                this.VacationHours = ((short)(ConvertUtilities.ChangeType(dict["VacationHours"], typeof(short), 0)));
            }
            if ((dict.Contains("SalariedFlag") == true))
            {
                this.SalariedFlag = ((bool)(ConvertUtilities.ChangeType(dict["SalariedFlag"], typeof(bool), true)));
            }
            if ((dict.Contains("HireDate") == true))
            {
                this.HireDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["HireDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("SickLeaveHours") == true))
            {
                this.SickLeaveHours = ((short)(ConvertUtilities.ChangeType(dict["SickLeaveHours"], typeof(short), 0)));
            }
            if ((dict.Contains("ModifiedDate") == true))
            {
                this.ModifiedDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["ModifiedDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("Rowguid") == true))
            {
                this.Rowguid = ((System.Guid)(ConvertUtilities.ChangeType(dict["Rowguid"], typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            }
            if ((dict.Contains("CurrentFlag") == true))
            {
                this.CurrentFlag = ((bool)(ConvertUtilities.ChangeType(dict["CurrentFlag"], typeof(bool), true)));
            }
            if ((dict.Contains("Gender") == true))
            {
                this.Gender = ((string)(ConvertUtilities.ChangeType(dict["Gender"], typeof(string), default(string))));
            }
            if ((dict.Contains("OrganizationNode") == true))
            {
                this.OrganizationNode = ((byte[])(ConvertUtilities.ChangeType(dict["OrganizationNode"], typeof(byte[]), default(byte[]))));
            }
            if ((dict.Contains("LoginID") == true))
            {
                this.LoginID = ((string)(ConvertUtilities.ChangeType(dict["LoginID"], typeof(string), default(string))));
            }
            if ((dict.Contains("NationalIDNumber") == true))
            {
                this.NationalIDNumber = ((string)(ConvertUtilities.ChangeType(dict["NationalIDNumber"], typeof(string), default(string))));
            }
            if ((dict.Contains("OrganizationLevel") == true))
            {
                this.OrganizationLevel = ((System.Nullable<System.Int16>)(ConvertUtilities.ChangeType(dict["OrganizationLevel"], typeof(System.Nullable<System.Int16>), null)));
            }
            if ((dict.Contains("MaritalStatus") == true))
            {
                this.MaritalStatus = ((string)(ConvertUtilities.ChangeType(dict["MaritalStatus"], typeof(string), default(string))));
            }
            if ((dict.Contains("BirthDate") == true))
            {
                this.BirthDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["BirthDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("JobTitle") == true))
            {
                this.JobTitle = ((string)(ConvertUtilities.ChangeType(dict["JobTitle"], typeof(string), default(string))));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(CodeFluentEntities.Bencher.HumanResources.Employee employee, bool deep)
        {
            if ((employee == null))
            {
                throw new System.ArgumentNullException("employee");
            }
            employee.BusinessEntityID = this.BusinessEntityID;
            employee.VacationHours = this.VacationHours;
            employee.SalariedFlag = this.SalariedFlag;
            employee.HireDate = this.HireDate;
            employee.SickLeaveHours = this.SickLeaveHours;
            employee.ModifiedDate = this.ModifiedDate;
            employee.Rowguid = this.Rowguid;
            employee.CurrentFlag = this.CurrentFlag;
            employee.Gender = this.Gender;
            employee.OrganizationNode = this.OrganizationNode;
            employee.LoginID = this.LoginID;
            employee.NationalIDNumber = this.NationalIDNumber;
            employee.OrganizationLevel = this.OrganizationLevel;
            employee.MaritalStatus = this.MaritalStatus;
            employee.BirthDate = this.BirthDate;
            employee.JobTitle = this.JobTitle;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, employee));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["BusinessEntityID"] = this.BusinessEntityID;
            dict["VacationHours"] = this.VacationHours;
            dict["SalariedFlag"] = this.SalariedFlag;
            dict["HireDate"] = this.HireDate;
            dict["SickLeaveHours"] = this.SickLeaveHours;
            dict["ModifiedDate"] = this.ModifiedDate;
            dict["Rowguid"] = this.Rowguid;
            dict["CurrentFlag"] = this.CurrentFlag;
            dict["Gender"] = this.Gender;
            dict["OrganizationNode"] = this.OrganizationNode;
            dict["LoginID"] = this.LoginID;
            dict["NationalIDNumber"] = this.NationalIDNumber;
            dict["OrganizationLevel"] = this.OrganizationLevel;
            dict["MaritalStatus"] = this.MaritalStatus;
            dict["BirthDate"] = this.BirthDate;
            dict["JobTitle"] = this.JobTitle;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
    }
}
