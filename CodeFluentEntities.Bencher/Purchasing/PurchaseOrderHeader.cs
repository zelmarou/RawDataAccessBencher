//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeFluentEntities.Bencher.Purchasing
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Tuesday, 18 March 2014 16:33.
    // Build:1.0.61214.0764
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0764")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, PurchaseOrderID={PurchaseOrderID}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    public partial class PurchaseOrderHeader : System.ICloneable, System.IComparable, System.IComparable<CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader>, CodeFluent.Runtime.ICodeFluentEntity, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private int _purchaseOrderID = -1;
        
        private byte _revisionNumber = 0;
        
        private byte _status = 1;
        
        private int _employeeID = CodeFluentPersistence.DefaultInt32Value;
        
        private int _vendorID = CodeFluentPersistence.DefaultInt32Value;
        
        private System.DateTime _orderDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private System.Nullable<System.DateTime> _shipDate = null;
        
        private decimal _subTotal = 0.00m;
        
        private decimal _taxAmt = 0.00m;
        
        private decimal _freight = 0.00m;
        
        private decimal _totalDue = CodeFluentPersistence.DefaultDecimalValue;
        
        private System.DateTime _modifiedDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private int _shipMethodShipMethodID = -1;
        
        [System.NonSerializedAttribute()]
        private CodeFluentEntities.Bencher.Purchasing.ShipMethod _shipMethod = null;
        
        public PurchaseOrderHeader()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                return this.PurchaseOrderID.ToString();
            }
            set
            {
                this.PurchaseOrderID = ((int)(ConvertUtilities.ChangeType(value, typeof(int), -1)));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.PurchaseOrderID.ToString();
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((int)(-1)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int PurchaseOrderID
        {
            get
            {
                return this._purchaseOrderID;
            }
            set
            {
                this._purchaseOrderID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("PurchaseOrderID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((byte)(0)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(byte))]
        public byte RevisionNumber
        {
            get
            {
                return this._revisionNumber;
            }
            set
            {
                this._revisionNumber = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RevisionNumber"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((byte)(1)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(byte))]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                this._status = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Status"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                this._employeeID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EmployeeID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int VendorID
        {
            get
            {
                return this._vendorID;
            }
            set
            {
                this._vendorID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("VendorID"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime OrderDate
        {
            get
            {
                return this._orderDate;
            }
            set
            {
                this._orderDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("OrderDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ShipDate
        {
            get
            {
                return this._shipDate;
            }
            set
            {
                this._shipDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ShipDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal SubTotal
        {
            get
            {
                return this._subTotal;
            }
            set
            {
                this._subTotal = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("SubTotal"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal TaxAmt
        {
            get
            {
                return this._taxAmt;
            }
            set
            {
                this._taxAmt = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("TaxAmt"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal Freight
        {
            get
            {
                return this._freight;
            }
            set
            {
                this._freight = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Freight"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal TotalDue
        {
            get
            {
                return this._totalDue;
            }
            set
            {
                this._totalDue = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("TotalDue"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this._modifiedDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModifiedDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int ShipMethodShipMethodID
        {
            get
            {
                if (((this._shipMethodShipMethodID == -1) 
                            && (this._shipMethod != null)))
                {
                    this._shipMethodShipMethodID = this._shipMethod.ShipMethodID;
                }
                return this._shipMethodShipMethodID;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.ShipMethodShipMethodID) == true))
                {
                    return;
                }
                this._shipMethod = null;
                this._shipMethodShipMethodID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ShipMethod"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ShipMethodShipMethodID"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public CodeFluentEntities.Bencher.Purchasing.ShipMethod ShipMethod
        {
            get
            {
                if ((this._shipMethod == null))
                {
                    this._shipMethod = CodeFluentEntities.Bencher.Purchasing.ShipMethod.Load(this._shipMethodShipMethodID);
                }
                return this._shipMethod;
            }
            set
            {
                this._shipMethodShipMethodID = -1;
                this._shipMethod = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ShipMethod"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ShipMethodShipMethodID"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader purchaseOrderHeader)
        {
            if ((purchaseOrderHeader == null))
            {
                return false;
            }
            if ((this.PurchaseOrderID == -1))
            {
                return base.Equals(purchaseOrderHeader);
            }
            return (this.PurchaseOrderID.Equals(purchaseOrderHeader.PurchaseOrderID) == true);
        }
        
        public override int GetHashCode()
        {
            return this._purchaseOrderID;
        }
        
        public override bool Equals(object obj)
        {
            CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader purchaseOrderHeader = null;
			purchaseOrderHeader = obj as CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader;
            return this.Equals(purchaseOrderHeader);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader purchaseOrderHeader = null;
purchaseOrderHeader = value as CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader;
            if ((purchaseOrderHeader == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(purchaseOrderHeader);
            return localCompareTo;
        }
        
        public virtual int CompareTo(CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader purchaseOrderHeader)
        {
            if ((purchaseOrderHeader == null))
            {
                throw new System.ArgumentNullException("purchaseOrderHeader");
            }
            int localCompareTo = this.PurchaseOrderID.CompareTo(purchaseOrderHeader.PurchaseOrderID);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = CodeFluentEntities.Bencher.Resources.Manager.GetStringWithDefault(culture, "CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader.ExternalValidate", "Type \'CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader\' cannot be valida" +
                            "ted.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Purchasing", "PurchaseOrderHeader", "Delete");
            persistence.AddRawParameter("@PurchaseOrderID", this.PurchaseOrderID);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._purchaseOrderID = CodeFluentPersistence.GetReaderValue(reader, "PurchaseOrderID", ((int)(-1)));
                this._revisionNumber = CodeFluentPersistence.GetReaderValue(reader, "RevisionNumber", ((byte)(0)));
                this._status = CodeFluentPersistence.GetReaderValue(reader, "Status", ((byte)(1)));
                this._employeeID = CodeFluentPersistence.GetReaderValue(reader, "EmployeeID", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._vendorID = CodeFluentPersistence.GetReaderValue(reader, "VendorID", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._orderDate = CodeFluentPersistence.GetReaderValue(reader, "OrderDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._shipDate = CodeFluentPersistence.GetReaderValue<System.DateTime>(reader, "ShipDate");
                this._subTotal = CodeFluentPersistence.GetReaderValue(reader, "SubTotal", ((decimal)(0.00m)));
                this._taxAmt = CodeFluentPersistence.GetReaderValue(reader, "TaxAmt", ((decimal)(0.00m)));
                this._freight = CodeFluentPersistence.GetReaderValue(reader, "Freight", ((decimal)(0.00m)));
                this._totalDue = CodeFluentPersistence.GetReaderValue(reader, "TotalDue", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
                this._modifiedDate = CodeFluentPersistence.GetReaderValue(reader, "ModifiedDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this.ShipMethodShipMethodID = CodeFluentPersistence.GetReaderValue(reader, "ShipMethodID", ((int)(-1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this._purchaseOrderID = CodeFluentPersistence.GetReaderValue(reader, "PurchaseOrderID", ((int)(-1)));
            this._totalDue = CodeFluentPersistence.GetReaderValue(reader, "TotalDue", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader Load(int purchaseOrderID)
        {
            if ((purchaseOrderID == -1))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader purchaseOrderHeader = new CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Purchasing", "PurchaseOrderHeader", "Load");
            persistence.AddRawParameter("@PurchaseOrderID", purchaseOrderID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    purchaseOrderHeader.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    purchaseOrderHeader.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return purchaseOrderHeader;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((this.PurchaseOrderID == -1))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Purchasing", "PurchaseOrderHeader", "Load");
            persistence.AddRawParameter("@PurchaseOrderID", this.PurchaseOrderID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Purchasing", "PurchaseOrderHeader", "Save");
            persistence.AddRawParameter("@PurchaseOrderID", this.PurchaseOrderID);
            persistence.AddRawParameter("@RevisionNumber", this.RevisionNumber);
            persistence.AddRawParameter("@Status", this.Status);
            persistence.AddRawParameter("@EmployeeID", this.EmployeeID);
            persistence.AddRawParameter("@VendorID", this.VendorID);
            persistence.AddRawParameter("@OrderDate", this.OrderDate);
            persistence.AddParameter("@ShipDate", this.ShipDate);
            persistence.AddRawParameter("@SubTotal", this.SubTotal);
            persistence.AddRawParameter("@TaxAmt", this.TaxAmt);
            persistence.AddRawParameter("@Freight", this.Freight);
            persistence.AddRawParameter("@ModifiedDate", this.ModifiedDate);
            persistence.AddRawParameter("@ShipMethodID", this.ShipMethodShipMethodID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader purchaseOrderHeader)
        {
            if ((purchaseOrderHeader == null))
            {
                return false;
            }
            bool ret = purchaseOrderHeader.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader purchaseOrderHeader)
        {
            bool ret = CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader.Save(purchaseOrderHeader);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader purchaseOrderHeader)
        {
            if ((purchaseOrderHeader == null))
            {
                return false;
            }
            bool ret = purchaseOrderHeader.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("PurchaseOrderID=");
            writer.Write(this.PurchaseOrderID);
            writer.Write(",");
            writer.Write("RevisionNumber=");
            writer.Write(this.RevisionNumber);
            writer.Write(",");
            writer.Write("Status=");
            writer.Write(this.Status);
            writer.Write(",");
            writer.Write("EmployeeID=");
            writer.Write(this.EmployeeID);
            writer.Write(",");
            writer.Write("VendorID=");
            writer.Write(this.VendorID);
            writer.Write(",");
            writer.Write("OrderDate=");
            writer.Write(this.OrderDate);
            writer.Write(",");
            writer.Write("ShipDate=");
            writer.Write(this.ShipDate);
            writer.Write(",");
            writer.Write("SubTotal=");
            writer.Write(this.SubTotal);
            writer.Write(",");
            writer.Write("TaxAmt=");
            writer.Write(this.TaxAmt);
            writer.Write(",");
            writer.Write("Freight=");
            writer.Write(this.Freight);
            writer.Write(",");
            writer.Write("TotalDue=");
            writer.Write(this.TotalDue);
            writer.Write(",");
            writer.Write("ModifiedDate=");
            writer.Write(this.ModifiedDate);
            writer.Write(",");
            writer.Write("ShipMethod=");
            if ((this._shipMethod != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._shipMethod)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_shipMethodShipMethodID=");
            writer.Write(this._shipMethodShipMethodID);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader purchaseOrderHeader;
            int var = ((int)(ConvertUtilities.ChangeType(key, typeof(int), -1)));
            purchaseOrderHeader = CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader.Load(var);
            return purchaseOrderHeader;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader Clone(bool deep)
        {
            CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader purchaseOrderHeader = new CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader();
            this.CopyTo(purchaseOrderHeader, deep);
            return purchaseOrderHeader;
        }
        
        public CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader Clone()
        {
            CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("PurchaseOrderID") == true))
            {
                this.PurchaseOrderID = ((int)(ConvertUtilities.ChangeType(dict["PurchaseOrderID"], typeof(int), -1)));
            }
            if ((dict.Contains("TaxAmt") == true))
            {
                this.TaxAmt = ((decimal)(ConvertUtilities.ChangeType(dict["TaxAmt"], typeof(decimal), 0.00m)));
            }
            if ((dict.Contains("SubTotal") == true))
            {
                this.SubTotal = ((decimal)(ConvertUtilities.ChangeType(dict["SubTotal"], typeof(decimal), 0.00m)));
            }
            if ((dict.Contains("Freight") == true))
            {
                this.Freight = ((decimal)(ConvertUtilities.ChangeType(dict["Freight"], typeof(decimal), 0.00m)));
            }
            if ((dict.Contains("ModifiedDate") == true))
            {
                this.ModifiedDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["ModifiedDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("TotalDue") == true))
            {
                this.TotalDue = ((decimal)(ConvertUtilities.ChangeType(dict["TotalDue"], typeof(decimal), CodeFluentPersistence.DefaultDecimalValue)));
            }
            if ((dict.Contains("ShipDate") == true))
            {
                this.ShipDate = ((System.Nullable<System.DateTime>)(ConvertUtilities.ChangeType(dict["ShipDate"], typeof(System.Nullable<System.DateTime>), null)));
            }
            if ((dict.Contains("Status") == true))
            {
                this.Status = ((byte)(ConvertUtilities.ChangeType(dict["Status"], typeof(byte), 1)));
            }
            if ((dict.Contains("RevisionNumber") == true))
            {
                this.RevisionNumber = ((byte)(ConvertUtilities.ChangeType(dict["RevisionNumber"], typeof(byte), 0)));
            }
            if ((dict.Contains("EmployeeID") == true))
            {
                this.EmployeeID = ((int)(ConvertUtilities.ChangeType(dict["EmployeeID"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("OrderDate") == true))
            {
                this.OrderDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["OrderDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("VendorID") == true))
            {
                this.VendorID = ((int)(ConvertUtilities.ChangeType(dict["VendorID"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("ShipMethodShipMethodID") == true))
            {
                this.ShipMethodShipMethodID = ((int)(ConvertUtilities.ChangeType(dict["ShipMethodShipMethodID"], typeof(int), -1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(CodeFluentEntities.Bencher.Purchasing.PurchaseOrderHeader purchaseOrderHeader, bool deep)
        {
            if ((purchaseOrderHeader == null))
            {
                throw new System.ArgumentNullException("purchaseOrderHeader");
            }
            purchaseOrderHeader.PurchaseOrderID = this.PurchaseOrderID;
            purchaseOrderHeader.TaxAmt = this.TaxAmt;
            purchaseOrderHeader.SubTotal = this.SubTotal;
            purchaseOrderHeader.Freight = this.Freight;
            purchaseOrderHeader.ModifiedDate = this.ModifiedDate;
            purchaseOrderHeader.TotalDue = this.TotalDue;
            purchaseOrderHeader.ShipDate = this.ShipDate;
            purchaseOrderHeader.Status = this.Status;
            purchaseOrderHeader.RevisionNumber = this.RevisionNumber;
            purchaseOrderHeader.EmployeeID = this.EmployeeID;
            purchaseOrderHeader.OrderDate = this.OrderDate;
            purchaseOrderHeader.VendorID = this.VendorID;
            purchaseOrderHeader.ShipMethodShipMethodID = this.ShipMethodShipMethodID;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, purchaseOrderHeader));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["PurchaseOrderID"] = this.PurchaseOrderID;
            dict["TaxAmt"] = this.TaxAmt;
            dict["SubTotal"] = this.SubTotal;
            dict["Freight"] = this.Freight;
            dict["ModifiedDate"] = this.ModifiedDate;
            dict["TotalDue"] = this.TotalDue;
            dict["ShipDate"] = this.ShipDate;
            dict["Status"] = this.Status;
            dict["RevisionNumber"] = this.RevisionNumber;
            dict["EmployeeID"] = this.EmployeeID;
            dict["OrderDate"] = this.OrderDate;
            dict["VendorID"] = this.VendorID;
            dict["ShipMethodShipMethodID"] = this.ShipMethodShipMethodID;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
    }
}
