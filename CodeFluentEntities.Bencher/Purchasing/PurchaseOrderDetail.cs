//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeFluentEntities.Bencher.Purchasing
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Tuesday, 18 March 2014 16:33.
    // Build:1.0.61214.0764
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0764")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, PurchaseOrderID={PurchaseOrderID}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    public partial class PurchaseOrderDetail : System.ICloneable, System.IComparable, System.IComparable<CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail>, CodeFluent.Runtime.ICodeFluentEntity, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private int _purchaseOrderID = CodeFluentPersistence.DefaultInt32Value;
        
        private int _purchaseOrderDetailID = -1;
        
        private System.DateTime _dueDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private short _orderQty = CodeFluentPersistence.DefaultInt16Value;
        
        private decimal _unitPrice = CodeFluentPersistence.DefaultDecimalValue;
        
        private decimal _lineTotal = CodeFluentPersistence.DefaultDecimalValue;
        
        private decimal _receivedQty = CodeFluentPersistence.DefaultDecimalValue;
        
        private decimal _rejectedQty = CodeFluentPersistence.DefaultDecimalValue;
        
        private decimal _stockedQty = CodeFluentPersistence.DefaultDecimalValue;
        
        private System.DateTime _modifiedDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private int _productProductID = -1;
        
        [System.NonSerializedAttribute()]
        private CodeFluentEntities.Bencher.Production.Product _product = null;
        
        public PurchaseOrderDetail()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                object[] keys = new object[] {
                        this.PurchaseOrderID,
                        this.PurchaseOrderDetailID};
                string v = CodeFluentPersistence.BuildEntityKey(keys);
                return v;
            }
            set
            {
                System.Type[] types = new System.Type[] {
                        typeof(int),
                        typeof(int)};
                object[] defaultValues = new object[] {
                        CodeFluentPersistence.DefaultInt32Value,
                        -1};
                object[] v1 = CodeFluentPersistence.ParseEntityKey(value, types, defaultValues);
                this.PurchaseOrderID = ((int)(v1[0]));
                this.PurchaseOrderDetailID = ((int)(v1[1]));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.PurchaseOrderID.ToString();
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int PurchaseOrderID
        {
            get
            {
                return this._purchaseOrderID;
            }
            set
            {
                this._purchaseOrderID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("PurchaseOrderID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((int)(-1)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int PurchaseOrderDetailID
        {
            get
            {
                return this._purchaseOrderDetailID;
            }
            set
            {
                this._purchaseOrderDetailID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("PurchaseOrderDetailID"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                this._dueDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("DueDate"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt16Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(short))]
        public short OrderQty
        {
            get
            {
                return this._orderQty;
            }
            set
            {
                this._orderQty = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("OrderQty"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal UnitPrice
        {
            get
            {
                return this._unitPrice;
            }
            set
            {
                this._unitPrice = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UnitPrice"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal LineTotal
        {
            get
            {
                return this._lineTotal;
            }
            set
            {
                this._lineTotal = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LineTotal"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal ReceivedQty
        {
            get
            {
                return this._receivedQty;
            }
            set
            {
                this._receivedQty = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ReceivedQty"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal RejectedQty
        {
            get
            {
                return this._rejectedQty;
            }
            set
            {
                this._rejectedQty = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RejectedQty"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal StockedQty
        {
            get
            {
                return this._stockedQty;
            }
            set
            {
                this._stockedQty = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StockedQty"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this._modifiedDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModifiedDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int ProductProductID
        {
            get
            {
                if (((this._productProductID == -1) 
                            && (this._product != null)))
                {
                    this._productProductID = this._product.ProductID;
                }
                return this._productProductID;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.ProductProductID) == true))
                {
                    return;
                }
                this._product = null;
                this._productProductID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Product"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ProductProductID"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public CodeFluentEntities.Bencher.Production.Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = CodeFluentEntities.Bencher.Production.Product.Load(this._productProductID);
                }
                return this._product;
            }
            set
            {
                this._productProductID = -1;
                this._product = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Product"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ProductProductID"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail purchaseOrderDetail)
        {
            if ((purchaseOrderDetail == null))
            {
                return false;
            }
            if (((this.PurchaseOrderID == CodeFluentPersistence.DefaultInt32Value) 
                        || (this.PurchaseOrderDetailID == -1)))
            {
                return base.Equals(purchaseOrderDetail);
            }
            return ((this.PurchaseOrderID.Equals(purchaseOrderDetail.PurchaseOrderID) && this.PurchaseOrderDetailID.Equals(purchaseOrderDetail.PurchaseOrderDetailID)) 
                        == true);
        }
        
        public override int GetHashCode()
        {
            if ((this.EntityKey == null))
            {
                return base.GetHashCode();
            }
            return this.EntityKey.GetHashCode();
        }
        
        public override bool Equals(object obj)
        {
            CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail purchaseOrderDetail = null;
			purchaseOrderDetail = obj as CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail;
            return this.Equals(purchaseOrderDetail);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail purchaseOrderDetail = null;
purchaseOrderDetail = value as CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail;
            if ((purchaseOrderDetail == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(purchaseOrderDetail);
            return localCompareTo;
        }
        
        public virtual int CompareTo(CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail purchaseOrderDetail)
        {
            if ((purchaseOrderDetail == null))
            {
                throw new System.ArgumentNullException("purchaseOrderDetail");
            }
            int localCompareTo = this.PurchaseOrderID.CompareTo(purchaseOrderDetail.PurchaseOrderID);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = CodeFluentEntities.Bencher.Resources.Manager.GetStringWithDefault(culture, "CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail.ExternalValidate", "Type \'CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail\' cannot be valida" +
                            "ted.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Purchasing", "PurchaseOrderDetail", "Delete");
            persistence.AddRawParameter("@PurchaseOrderID", this.PurchaseOrderID);
            persistence.AddRawParameter("@PurchaseOrderDetailID", this.PurchaseOrderDetailID);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._purchaseOrderID = CodeFluentPersistence.GetReaderValue(reader, "PurchaseOrderID", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._purchaseOrderDetailID = CodeFluentPersistence.GetReaderValue(reader, "PurchaseOrderDetailID", ((int)(-1)));
                this._dueDate = CodeFluentPersistence.GetReaderValue(reader, "DueDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._orderQty = CodeFluentPersistence.GetReaderValue(reader, "OrderQty", ((short)(CodeFluentPersistence.DefaultInt16Value)));
                this._unitPrice = CodeFluentPersistence.GetReaderValue(reader, "UnitPrice", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
                this._lineTotal = CodeFluentPersistence.GetReaderValue(reader, "LineTotal", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
                this._receivedQty = CodeFluentPersistence.GetReaderValue(reader, "ReceivedQty", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
                this._rejectedQty = CodeFluentPersistence.GetReaderValue(reader, "RejectedQty", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
                this._stockedQty = CodeFluentPersistence.GetReaderValue(reader, "StockedQty", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
                this._modifiedDate = CodeFluentPersistence.GetReaderValue(reader, "ModifiedDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this.ProductProductID = CodeFluentPersistence.GetReaderValue(reader, "ProductID", ((int)(-1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this._purchaseOrderDetailID = CodeFluentPersistence.GetReaderValue(reader, "PurchaseOrderDetailID", ((int)(-1)));
            this._lineTotal = CodeFluentPersistence.GetReaderValue(reader, "LineTotal", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
            this._stockedQty = CodeFluentPersistence.GetReaderValue(reader, "StockedQty", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail Load(int purchaseOrderID, int purchaseOrderDetailID)
        {
            if ((purchaseOrderID == CodeFluentPersistence.DefaultInt32Value))
            {
                return null;
            }
            if ((purchaseOrderDetailID == -1))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail purchaseOrderDetail = new CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Purchasing", "PurchaseOrderDetail", "Load");
            persistence.AddRawParameter("@PurchaseOrderID", purchaseOrderID);
            persistence.AddRawParameter("@PurchaseOrderDetailID", purchaseOrderDetailID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    purchaseOrderDetail.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    purchaseOrderDetail.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return purchaseOrderDetail;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if (((this.PurchaseOrderID == CodeFluentPersistence.DefaultInt32Value) 
                        || (this.PurchaseOrderDetailID == -1)))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Purchasing", "PurchaseOrderDetail", "Load");
            persistence.AddRawParameter("@PurchaseOrderID", this.PurchaseOrderID);
            persistence.AddRawParameter("@PurchaseOrderDetailID", this.PurchaseOrderDetailID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Purchasing", "PurchaseOrderDetail", "Save");
            persistence.AddRawParameter("@PurchaseOrderID", this.PurchaseOrderID);
            persistence.AddRawParameter("@PurchaseOrderDetailID", this.PurchaseOrderDetailID);
            persistence.AddRawParameter("@DueDate", this.DueDate);
            persistence.AddRawParameter("@OrderQty", this.OrderQty);
            persistence.AddRawParameter("@UnitPrice", this.UnitPrice);
            persistence.AddRawParameter("@ReceivedQty", this.ReceivedQty);
            persistence.AddRawParameter("@RejectedQty", this.RejectedQty);
            persistence.AddRawParameter("@ModifiedDate", this.ModifiedDate);
            persistence.AddRawParameter("@ProductID", this.ProductProductID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail purchaseOrderDetail)
        {
            if ((purchaseOrderDetail == null))
            {
                return false;
            }
            bool ret = purchaseOrderDetail.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail purchaseOrderDetail)
        {
            bool ret = CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail.Save(purchaseOrderDetail);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail purchaseOrderDetail)
        {
            if ((purchaseOrderDetail == null))
            {
                return false;
            }
            bool ret = purchaseOrderDetail.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("PurchaseOrderID=");
            writer.Write(this.PurchaseOrderID);
            writer.Write(",");
            writer.Write("PurchaseOrderDetailID=");
            writer.Write(this.PurchaseOrderDetailID);
            writer.Write(",");
            writer.Write("DueDate=");
            writer.Write(this.DueDate);
            writer.Write(",");
            writer.Write("OrderQty=");
            writer.Write(this.OrderQty);
            writer.Write(",");
            writer.Write("UnitPrice=");
            writer.Write(this.UnitPrice);
            writer.Write(",");
            writer.Write("LineTotal=");
            writer.Write(this.LineTotal);
            writer.Write(",");
            writer.Write("ReceivedQty=");
            writer.Write(this.ReceivedQty);
            writer.Write(",");
            writer.Write("RejectedQty=");
            writer.Write(this.RejectedQty);
            writer.Write(",");
            writer.Write("StockedQty=");
            writer.Write(this.StockedQty);
            writer.Write(",");
            writer.Write("ModifiedDate=");
            writer.Write(this.ModifiedDate);
            writer.Write(",");
            writer.Write("Product=");
            if ((this._product != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._product)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_productProductID=");
            writer.Write(this._productProductID);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail purchaseOrderDetail;
            System.Type[] types = new System.Type[] {
                    typeof(int),
                    typeof(int)};
            object[] defaultValues = new object[] {
                    CodeFluentPersistence.DefaultInt32Value,
                    -1};
            object[] v = CodeFluentPersistence.ParseEntityKey(key, types, defaultValues);
            int var0;
            var0 = ((int)(v[0]));
            int var1;
            var1 = ((int)(v[1]));
            purchaseOrderDetail = CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail.Load(var0, var1);
            return purchaseOrderDetail;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail Clone(bool deep)
        {
            CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail purchaseOrderDetail = new CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail();
            this.CopyTo(purchaseOrderDetail, deep);
            return purchaseOrderDetail;
        }
        
        public CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail Clone()
        {
            CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("PurchaseOrderDetailID") == true))
            {
                this.PurchaseOrderDetailID = ((int)(ConvertUtilities.ChangeType(dict["PurchaseOrderDetailID"], typeof(int), -1)));
            }
            if ((dict.Contains("PurchaseOrderID") == true))
            {
                this.PurchaseOrderID = ((int)(ConvertUtilities.ChangeType(dict["PurchaseOrderID"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("RejectedQty") == true))
            {
                this.RejectedQty = ((decimal)(ConvertUtilities.ChangeType(dict["RejectedQty"], typeof(decimal), CodeFluentPersistence.DefaultDecimalValue)));
            }
            if ((dict.Contains("ReceivedQty") == true))
            {
                this.ReceivedQty = ((decimal)(ConvertUtilities.ChangeType(dict["ReceivedQty"], typeof(decimal), CodeFluentPersistence.DefaultDecimalValue)));
            }
            if ((dict.Contains("ModifiedDate") == true))
            {
                this.ModifiedDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["ModifiedDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("StockedQty") == true))
            {
                this.StockedQty = ((decimal)(ConvertUtilities.ChangeType(dict["StockedQty"], typeof(decimal), CodeFluentPersistence.DefaultDecimalValue)));
            }
            if ((dict.Contains("OrderQty") == true))
            {
                this.OrderQty = ((short)(ConvertUtilities.ChangeType(dict["OrderQty"], typeof(short), CodeFluentPersistence.DefaultInt16Value)));
            }
            if ((dict.Contains("DueDate") == true))
            {
                this.DueDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["DueDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("LineTotal") == true))
            {
                this.LineTotal = ((decimal)(ConvertUtilities.ChangeType(dict["LineTotal"], typeof(decimal), CodeFluentPersistence.DefaultDecimalValue)));
            }
            if ((dict.Contains("UnitPrice") == true))
            {
                this.UnitPrice = ((decimal)(ConvertUtilities.ChangeType(dict["UnitPrice"], typeof(decimal), CodeFluentPersistence.DefaultDecimalValue)));
            }
            if ((dict.Contains("ProductProductID") == true))
            {
                this.ProductProductID = ((int)(ConvertUtilities.ChangeType(dict["ProductProductID"], typeof(int), -1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(CodeFluentEntities.Bencher.Purchasing.PurchaseOrderDetail purchaseOrderDetail, bool deep)
        {
            if ((purchaseOrderDetail == null))
            {
                throw new System.ArgumentNullException("purchaseOrderDetail");
            }
            purchaseOrderDetail.PurchaseOrderDetailID = this.PurchaseOrderDetailID;
            purchaseOrderDetail.PurchaseOrderID = this.PurchaseOrderID;
            purchaseOrderDetail.RejectedQty = this.RejectedQty;
            purchaseOrderDetail.ReceivedQty = this.ReceivedQty;
            purchaseOrderDetail.ModifiedDate = this.ModifiedDate;
            purchaseOrderDetail.StockedQty = this.StockedQty;
            purchaseOrderDetail.OrderQty = this.OrderQty;
            purchaseOrderDetail.DueDate = this.DueDate;
            purchaseOrderDetail.LineTotal = this.LineTotal;
            purchaseOrderDetail.UnitPrice = this.UnitPrice;
            purchaseOrderDetail.ProductProductID = this.ProductProductID;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, purchaseOrderDetail));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["PurchaseOrderDetailID"] = this.PurchaseOrderDetailID;
            dict["PurchaseOrderID"] = this.PurchaseOrderID;
            dict["RejectedQty"] = this.RejectedQty;
            dict["ReceivedQty"] = this.ReceivedQty;
            dict["ModifiedDate"] = this.ModifiedDate;
            dict["StockedQty"] = this.StockedQty;
            dict["OrderQty"] = this.OrderQty;
            dict["DueDate"] = this.DueDate;
            dict["LineTotal"] = this.LineTotal;
            dict["UnitPrice"] = this.UnitPrice;
            dict["ProductProductID"] = this.ProductProductID;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
    }
}
