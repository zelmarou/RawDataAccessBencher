//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeFluentEntities.Bencher.Purchasing
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Tuesday, 18 March 2014 16:33.
    // Build:1.0.61214.0764
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0764")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, ProductID={ProductID}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    public partial class ProductVendor : System.ICloneable, System.IComparable, System.IComparable<CodeFluentEntities.Bencher.Purchasing.ProductVendor>, CodeFluent.Runtime.ICodeFluentEntity, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<CodeFluentEntities.Bencher.Purchasing.ProductVendor>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private int _productID = CodeFluentPersistence.DefaultInt32Value;
        
        private int _businessEntityID = CodeFluentPersistence.DefaultInt32Value;
        
        private int _averageLeadTime = CodeFluentPersistence.DefaultInt32Value;
        
        private decimal _standardPrice = CodeFluentPersistence.DefaultDecimalValue;
        
        private System.Nullable<decimal> _lastReceiptCost = null;
        
        private System.Nullable<System.DateTime> _lastReceiptDate = null;
        
        private int _minOrderQty = CodeFluentPersistence.DefaultInt32Value;
        
        private int _maxOrderQty = CodeFluentPersistence.DefaultInt32Value;
        
        private System.Nullable<int> _onOrderQty = null;
        
        private System.DateTime _modifiedDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private string _unitMeasureUnitMeasureCode = default(string);
        
        [System.NonSerializedAttribute()]
        private CodeFluentEntities.Bencher.Production.UnitMeasure _unitMeasure = null;
        
        public ProductVendor()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                object[] keys = new object[] {
                        this.ProductID,
                        this.BusinessEntityID};
                string v = CodeFluentPersistence.BuildEntityKey(keys);
                return v;
            }
            set
            {
                System.Type[] types = new System.Type[] {
                        typeof(int),
                        typeof(int)};
                object[] defaultValues = new object[] {
                        CodeFluentPersistence.DefaultInt32Value,
                        CodeFluentPersistence.DefaultInt32Value};
                object[] v1 = CodeFluentPersistence.ParseEntityKey(value, types, defaultValues);
                this.ProductID = ((int)(v1[0]));
                this.BusinessEntityID = ((int)(v1[1]));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.ProductID.ToString();
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                this._productID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ProductID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int BusinessEntityID
        {
            get
            {
                return this._businessEntityID;
            }
            set
            {
                this._businessEntityID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("BusinessEntityID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int AverageLeadTime
        {
            get
            {
                return this._averageLeadTime;
            }
            set
            {
                this._averageLeadTime = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("AverageLeadTime"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        public decimal StandardPrice
        {
            get
            {
                return this._standardPrice;
            }
            set
            {
                this._standardPrice = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StandardPrice"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> LastReceiptCost
        {
            get
            {
                return this._lastReceiptCost;
            }
            set
            {
                this._lastReceiptCost = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LastReceiptCost"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> LastReceiptDate
        {
            get
            {
                return this._lastReceiptDate;
            }
            set
            {
                this._lastReceiptDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LastReceiptDate"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MinOrderQty
        {
            get
            {
                return this._minOrderQty;
            }
            set
            {
                this._minOrderQty = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MinOrderQty"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MaxOrderQty
        {
            get
            {
                return this._maxOrderQty;
            }
            set
            {
                this._maxOrderQty = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MaxOrderQty"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OnOrderQty
        {
            get
            {
                return this._onOrderQty;
            }
            set
            {
                this._onOrderQty = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("OnOrderQty"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this._modifiedDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModifiedDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public string UnitMeasureUnitMeasureCode
        {
            get
            {
                if (((this._unitMeasureUnitMeasureCode == default(string)) 
                            && (this._unitMeasure != null)))
                {
                    this._unitMeasureUnitMeasureCode = this._unitMeasure.UnitMeasureCode;
                }
                return this._unitMeasureUnitMeasureCode;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<string>.Default.Equals(value, this.UnitMeasureUnitMeasureCode) == true))
                {
                    return;
                }
                this._unitMeasure = null;
                this._unitMeasureUnitMeasureCode = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UnitMeasure"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UnitMeasureUnitMeasureCode"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public CodeFluentEntities.Bencher.Production.UnitMeasure UnitMeasure
        {
            get
            {
                if ((this._unitMeasure == null))
                {
                    this._unitMeasure = CodeFluentEntities.Bencher.Production.UnitMeasure.Load(this._unitMeasureUnitMeasureCode);
                }
                return this._unitMeasure;
            }
            set
            {
                this._unitMeasureUnitMeasureCode = default(string);
                this._unitMeasure = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UnitMeasure"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UnitMeasureUnitMeasureCode"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(CodeFluentEntities.Bencher.Purchasing.ProductVendor productVendor)
        {
            if ((productVendor == null))
            {
                return false;
            }
            if (((this.ProductID == CodeFluentPersistence.DefaultInt32Value) 
                        || (this.BusinessEntityID == CodeFluentPersistence.DefaultInt32Value)))
            {
                return base.Equals(productVendor);
            }
            return ((this.ProductID.Equals(productVendor.ProductID) && this.BusinessEntityID.Equals(productVendor.BusinessEntityID)) 
                        == true);
        }
        
        public override int GetHashCode()
        {
            if ((this.EntityKey == null))
            {
                return base.GetHashCode();
            }
            return this.EntityKey.GetHashCode();
        }
        
        public override bool Equals(object obj)
        {
            CodeFluentEntities.Bencher.Purchasing.ProductVendor productVendor = null;
			productVendor = obj as CodeFluentEntities.Bencher.Purchasing.ProductVendor;
            return this.Equals(productVendor);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            CodeFluentEntities.Bencher.Purchasing.ProductVendor productVendor = null;
productVendor = value as CodeFluentEntities.Bencher.Purchasing.ProductVendor;
            if ((productVendor == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(productVendor);
            return localCompareTo;
        }
        
        public virtual int CompareTo(CodeFluentEntities.Bencher.Purchasing.ProductVendor productVendor)
        {
            if ((productVendor == null))
            {
                throw new System.ArgumentNullException("productVendor");
            }
            int localCompareTo = this.ProductID.CompareTo(productVendor.ProductID);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = CodeFluentEntities.Bencher.Resources.Manager.GetStringWithDefault(culture, "CodeFluentEntities.Bencher.Purchasing.ProductVendor.ExternalValidate", "Type \'CodeFluentEntities.Bencher.Purchasing.ProductVendor\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Purchasing", "ProductVendor", "Delete");
            persistence.AddRawParameter("@ProductID", this.ProductID);
            persistence.AddRawParameter("@BusinessEntityID", this.BusinessEntityID);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._productID = CodeFluentPersistence.GetReaderValue(reader, "ProductID", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._businessEntityID = CodeFluentPersistence.GetReaderValue(reader, "BusinessEntityID", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._averageLeadTime = CodeFluentPersistence.GetReaderValue(reader, "AverageLeadTime", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._standardPrice = CodeFluentPersistence.GetReaderValue(reader, "StandardPrice", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
                this._lastReceiptCost = CodeFluentPersistence.GetReaderValue<decimal>(reader, "LastReceiptCost");
                this._lastReceiptDate = CodeFluentPersistence.GetReaderValue<System.DateTime>(reader, "LastReceiptDate");
                this._minOrderQty = CodeFluentPersistence.GetReaderValue(reader, "MinOrderQty", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._maxOrderQty = CodeFluentPersistence.GetReaderValue(reader, "MaxOrderQty", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._onOrderQty = CodeFluentPersistence.GetReaderValue<int>(reader, "OnOrderQty");
                this._modifiedDate = CodeFluentPersistence.GetReaderValue(reader, "ModifiedDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this.UnitMeasureUnitMeasureCode = CodeFluentPersistence.GetReaderValue(reader, "UnitMeasureCode", ((string)(default(string))));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Purchasing.ProductVendor Load(int productID, int businessEntityID)
        {
            if ((productID == CodeFluentPersistence.DefaultInt32Value))
            {
                return null;
            }
            if ((businessEntityID == CodeFluentPersistence.DefaultInt32Value))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Purchasing.ProductVendor productVendor = new CodeFluentEntities.Bencher.Purchasing.ProductVendor();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Purchasing", "ProductVendor", "Load");
            persistence.AddRawParameter("@ProductID", productID);
            persistence.AddRawParameter("@BusinessEntityID", businessEntityID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    productVendor.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    productVendor.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return productVendor;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if (((this.ProductID == CodeFluentPersistence.DefaultInt32Value) 
                        || (this.BusinessEntityID == CodeFluentPersistence.DefaultInt32Value)))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Purchasing", "ProductVendor", "Load");
            persistence.AddRawParameter("@ProductID", this.ProductID);
            persistence.AddRawParameter("@BusinessEntityID", this.BusinessEntityID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Purchasing", "ProductVendor", "Save");
            persistence.AddRawParameter("@ProductID", this.ProductID);
            persistence.AddRawParameter("@BusinessEntityID", this.BusinessEntityID);
            persistence.AddRawParameter("@AverageLeadTime", this.AverageLeadTime);
            persistence.AddRawParameter("@StandardPrice", this.StandardPrice);
            persistence.AddParameter("@LastReceiptCost", this.LastReceiptCost);
            persistence.AddParameter("@LastReceiptDate", this.LastReceiptDate);
            persistence.AddRawParameter("@MinOrderQty", this.MinOrderQty);
            persistence.AddRawParameter("@MaxOrderQty", this.MaxOrderQty);
            persistence.AddParameter("@OnOrderQty", this.OnOrderQty);
            persistence.AddRawParameter("@ModifiedDate", this.ModifiedDate);
            persistence.AddRawParameter("@UnitMeasureCode", this.UnitMeasureUnitMeasureCode);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(CodeFluentEntities.Bencher.Purchasing.ProductVendor productVendor)
        {
            if ((productVendor == null))
            {
                return false;
            }
            bool ret = productVendor.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(CodeFluentEntities.Bencher.Purchasing.ProductVendor productVendor)
        {
            bool ret = CodeFluentEntities.Bencher.Purchasing.ProductVendor.Save(productVendor);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(CodeFluentEntities.Bencher.Purchasing.ProductVendor productVendor)
        {
            if ((productVendor == null))
            {
                return false;
            }
            bool ret = productVendor.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("ProductID=");
            writer.Write(this.ProductID);
            writer.Write(",");
            writer.Write("BusinessEntityID=");
            writer.Write(this.BusinessEntityID);
            writer.Write(",");
            writer.Write("AverageLeadTime=");
            writer.Write(this.AverageLeadTime);
            writer.Write(",");
            writer.Write("StandardPrice=");
            writer.Write(this.StandardPrice);
            writer.Write(",");
            writer.Write("LastReceiptCost=");
            writer.Write(this.LastReceiptCost);
            writer.Write(",");
            writer.Write("LastReceiptDate=");
            writer.Write(this.LastReceiptDate);
            writer.Write(",");
            writer.Write("MinOrderQty=");
            writer.Write(this.MinOrderQty);
            writer.Write(",");
            writer.Write("MaxOrderQty=");
            writer.Write(this.MaxOrderQty);
            writer.Write(",");
            writer.Write("OnOrderQty=");
            writer.Write(this.OnOrderQty);
            writer.Write(",");
            writer.Write("ModifiedDate=");
            writer.Write(this.ModifiedDate);
            writer.Write(",");
            writer.Write("UnitMeasure=");
            if ((this._unitMeasure != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._unitMeasure)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_unitMeasureUnitMeasureCode=");
            writer.Write(this._unitMeasureUnitMeasureCode);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Purchasing.ProductVendor LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Purchasing.ProductVendor productVendor;
            System.Type[] types = new System.Type[] {
                    typeof(int),
                    typeof(int)};
            object[] defaultValues = new object[] {
                    CodeFluentPersistence.DefaultInt32Value,
                    CodeFluentPersistence.DefaultInt32Value};
            object[] v = CodeFluentPersistence.ParseEntityKey(key, types, defaultValues);
            int var0;
            var0 = ((int)(v[0]));
            int var1;
            var1 = ((int)(v[1]));
            productVendor = CodeFluentEntities.Bencher.Purchasing.ProductVendor.Load(var0, var1);
            return productVendor;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public CodeFluentEntities.Bencher.Purchasing.ProductVendor Clone(bool deep)
        {
            CodeFluentEntities.Bencher.Purchasing.ProductVendor productVendor = new CodeFluentEntities.Bencher.Purchasing.ProductVendor();
            this.CopyTo(productVendor, deep);
            return productVendor;
        }
        
        public CodeFluentEntities.Bencher.Purchasing.ProductVendor Clone()
        {
            CodeFluentEntities.Bencher.Purchasing.ProductVendor localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("BusinessEntityID") == true))
            {
                this.BusinessEntityID = ((int)(ConvertUtilities.ChangeType(dict["BusinessEntityID"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("ProductID") == true))
            {
                this.ProductID = ((int)(ConvertUtilities.ChangeType(dict["ProductID"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("MaxOrderQty") == true))
            {
                this.MaxOrderQty = ((int)(ConvertUtilities.ChangeType(dict["MaxOrderQty"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("MinOrderQty") == true))
            {
                this.MinOrderQty = ((int)(ConvertUtilities.ChangeType(dict["MinOrderQty"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("ModifiedDate") == true))
            {
                this.ModifiedDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["ModifiedDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("OnOrderQty") == true))
            {
                this.OnOrderQty = ((System.Nullable<System.Int32>)(ConvertUtilities.ChangeType(dict["OnOrderQty"], typeof(System.Nullable<System.Int32>), null)));
            }
            if ((dict.Contains("StandardPrice") == true))
            {
                this.StandardPrice = ((decimal)(ConvertUtilities.ChangeType(dict["StandardPrice"], typeof(decimal), CodeFluentPersistence.DefaultDecimalValue)));
            }
            if ((dict.Contains("AverageLeadTime") == true))
            {
                this.AverageLeadTime = ((int)(ConvertUtilities.ChangeType(dict["AverageLeadTime"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("LastReceiptDate") == true))
            {
                this.LastReceiptDate = ((System.Nullable<System.DateTime>)(ConvertUtilities.ChangeType(dict["LastReceiptDate"], typeof(System.Nullable<System.DateTime>), null)));
            }
            if ((dict.Contains("LastReceiptCost") == true))
            {
                this.LastReceiptCost = ((System.Nullable<System.Decimal>)(ConvertUtilities.ChangeType(dict["LastReceiptCost"], typeof(System.Nullable<System.Decimal>), null)));
            }
            if ((dict.Contains("UnitMeasureUnitMeasureCode") == true))
            {
                this.UnitMeasureUnitMeasureCode = ((string)(ConvertUtilities.ChangeType(dict["UnitMeasureUnitMeasureCode"], typeof(string), default(string))));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(CodeFluentEntities.Bencher.Purchasing.ProductVendor productVendor, bool deep)
        {
            if ((productVendor == null))
            {
                throw new System.ArgumentNullException("productVendor");
            }
            productVendor.BusinessEntityID = this.BusinessEntityID;
            productVendor.ProductID = this.ProductID;
            productVendor.MaxOrderQty = this.MaxOrderQty;
            productVendor.MinOrderQty = this.MinOrderQty;
            productVendor.ModifiedDate = this.ModifiedDate;
            productVendor.OnOrderQty = this.OnOrderQty;
            productVendor.StandardPrice = this.StandardPrice;
            productVendor.AverageLeadTime = this.AverageLeadTime;
            productVendor.LastReceiptDate = this.LastReceiptDate;
            productVendor.LastReceiptCost = this.LastReceiptCost;
            productVendor.UnitMeasureUnitMeasureCode = this.UnitMeasureUnitMeasureCode;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, productVendor));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["BusinessEntityID"] = this.BusinessEntityID;
            dict["ProductID"] = this.ProductID;
            dict["MaxOrderQty"] = this.MaxOrderQty;
            dict["MinOrderQty"] = this.MinOrderQty;
            dict["ModifiedDate"] = this.ModifiedDate;
            dict["OnOrderQty"] = this.OnOrderQty;
            dict["StandardPrice"] = this.StandardPrice;
            dict["AverageLeadTime"] = this.AverageLeadTime;
            dict["LastReceiptDate"] = this.LastReceiptDate;
            dict["LastReceiptCost"] = this.LastReceiptCost;
            dict["UnitMeasureUnitMeasureCode"] = this.UnitMeasureUnitMeasureCode;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
    }
}
