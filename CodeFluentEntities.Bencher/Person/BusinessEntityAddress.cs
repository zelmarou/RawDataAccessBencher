//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeFluentEntities.Bencher.Person
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Tuesday, 18 March 2014 16:33.
    // Build:1.0.61214.0764
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0764")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, AddressID={AddressID}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    public partial class BusinessEntityAddress : System.ICloneable, System.IComparable, System.IComparable<CodeFluentEntities.Bencher.Person.BusinessEntityAddress>, CodeFluent.Runtime.ICodeFluentEntity, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<CodeFluentEntities.Bencher.Person.BusinessEntityAddress>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private int _addressID = CodeFluentPersistence.DefaultInt32Value;
        
        private int _addressTypeID = CodeFluentPersistence.DefaultInt32Value;
        
        private System.Guid _rowguid = CodeFluentPersistence.DefaultGuidValue;
        
        private System.DateTime _modifiedDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private int _businessEntityBusinessEntityID = -1;
        
        [System.NonSerializedAttribute()]
        private CodeFluentEntities.Bencher.Person.BusinessEntity _businessEntity = null;
        
        public BusinessEntityAddress()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                object[] keys = new object[] {
                        this.AddressID,
                        this.AddressTypeID,
                        this.BusinessEntityBusinessEntityID};
                string v = CodeFluentPersistence.BuildEntityKey(keys);
                return v;
            }
            set
            {
                System.Type[] types = new System.Type[] {
                        typeof(int),
                        typeof(int),
                        typeof(int)};
                object[] defaultValues = new object[] {
                        CodeFluentPersistence.DefaultInt32Value,
                        CodeFluentPersistence.DefaultInt32Value,
                        -1};
                object[] v1 = CodeFluentPersistence.ParseEntityKey(value, types, defaultValues);
                this.AddressID = ((int)(v1[0]));
                this.AddressTypeID = ((int)(v1[1]));
                this.BusinessEntityBusinessEntityID = ((int)(v1[2]));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.AddressID.ToString();
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int AddressID
        {
            get
            {
                return this._addressID;
            }
            set
            {
                this._addressID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("AddressID"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int AddressTypeID
        {
            get
            {
                return this._addressTypeID;
            }
            set
            {
                this._addressTypeID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("AddressTypeID"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.Guid))]
        public System.Guid Rowguid
        {
            get
            {
                return this._rowguid;
            }
            set
            {
                this._rowguid = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Rowguid"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this._modifiedDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ModifiedDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int BusinessEntityBusinessEntityID
        {
            get
            {
                if (((this._businessEntityBusinessEntityID == -1) 
                            && (this._businessEntity != null)))
                {
                    this._businessEntityBusinessEntityID = this._businessEntity.BusinessEntityID;
                }
                return this._businessEntityBusinessEntityID;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.BusinessEntityBusinessEntityID) == true))
                {
                    return;
                }
                this._businessEntity = null;
                this._businessEntityBusinessEntityID = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("BusinessEntity"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("BusinessEntityBusinessEntityID"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public CodeFluentEntities.Bencher.Person.BusinessEntity BusinessEntity
        {
            get
            {
                if ((this._businessEntity == null))
                {
                    this._businessEntity = CodeFluentEntities.Bencher.Person.BusinessEntity.Load(this._businessEntityBusinessEntityID);
                }
                return this._businessEntity;
            }
            set
            {
                this._businessEntityBusinessEntityID = -1;
                this._businessEntity = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("BusinessEntity"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("BusinessEntityBusinessEntityID"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(CodeFluentEntities.Bencher.Person.BusinessEntityAddress businessEntityAddress)
        {
            if ((businessEntityAddress == null))
            {
                return false;
            }
            if ((((this.AddressID == CodeFluentPersistence.DefaultInt32Value) 
                        || (this.AddressTypeID == CodeFluentPersistence.DefaultInt32Value)) 
                        || (this.BusinessEntityBusinessEntityID == -1)))
            {
                return base.Equals(businessEntityAddress);
            }
            return (((this.AddressID.Equals(businessEntityAddress.AddressID) && this.AddressTypeID.Equals(businessEntityAddress.AddressTypeID)) 
                        && this.BusinessEntityBusinessEntityID.Equals(businessEntityAddress.BusinessEntityBusinessEntityID)) 
                        == true);
        }
        
        public override int GetHashCode()
        {
            if ((this.EntityKey == null))
            {
                return base.GetHashCode();
            }
            return this.EntityKey.GetHashCode();
        }
        
        public override bool Equals(object obj)
        {
            CodeFluentEntities.Bencher.Person.BusinessEntityAddress businessEntityAddress = null;
			businessEntityAddress = obj as CodeFluentEntities.Bencher.Person.BusinessEntityAddress;
            return this.Equals(businessEntityAddress);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            CodeFluentEntities.Bencher.Person.BusinessEntityAddress businessEntityAddress = null;
businessEntityAddress = value as CodeFluentEntities.Bencher.Person.BusinessEntityAddress;
            if ((businessEntityAddress == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(businessEntityAddress);
            return localCompareTo;
        }
        
        public virtual int CompareTo(CodeFluentEntities.Bencher.Person.BusinessEntityAddress businessEntityAddress)
        {
            if ((businessEntityAddress == null))
            {
                throw new System.ArgumentNullException("businessEntityAddress");
            }
            int localCompareTo = this.AddressID.CompareTo(businessEntityAddress.AddressID);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = CodeFluentEntities.Bencher.Resources.Manager.GetStringWithDefault(culture, "CodeFluentEntities.Bencher.Person.BusinessEntityAddress.ExternalValidate", "Type \'CodeFluentEntities.Bencher.Person.BusinessEntityAddress\' cannot be validate" +
                            "d.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Person", "BusinessEntityAddress", "Delete");
            persistence.AddRawParameter("@AddressID", this.AddressID);
            persistence.AddRawParameter("@AddressTypeID", this.AddressTypeID);
            persistence.AddRawParameter("@BusinessEntityID", this.BusinessEntityBusinessEntityID);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._addressID = CodeFluentPersistence.GetReaderValue(reader, "AddressID", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._addressTypeID = CodeFluentPersistence.GetReaderValue(reader, "AddressTypeID", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._rowguid = CodeFluentPersistence.GetReaderValue(reader, "rowguid", ((System.Guid)(CodeFluentPersistence.DefaultGuidValue)));
                this._modifiedDate = CodeFluentPersistence.GetReaderValue(reader, "ModifiedDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this.BusinessEntityBusinessEntityID = CodeFluentPersistence.GetReaderValue(reader, "BusinessEntityID", ((int)(-1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Person.BusinessEntityAddress Load(int addressID, int addressTypeID, int businessEntityBusinessEntityID)
        {
            if ((businessEntityBusinessEntityID == -1))
            {
                return null;
            }
            if ((addressID == CodeFluentPersistence.DefaultInt32Value))
            {
                return null;
            }
            if ((addressTypeID == CodeFluentPersistence.DefaultInt32Value))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Person.BusinessEntityAddress businessEntityAddress = new CodeFluentEntities.Bencher.Person.BusinessEntityAddress();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Person", "BusinessEntityAddress", "Load");
            persistence.AddRawParameter("@AddressID", addressID);
            persistence.AddRawParameter("@AddressTypeID", addressTypeID);
            persistence.AddRawParameter("@BusinessEntityBusinessEntityID", businessEntityBusinessEntityID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    businessEntityAddress.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    businessEntityAddress.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return businessEntityAddress;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((((this.AddressID == CodeFluentPersistence.DefaultInt32Value) 
                        || (this.AddressTypeID == CodeFluentPersistence.DefaultInt32Value)) 
                        || (this.BusinessEntityBusinessEntityID == -1)))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Person", "BusinessEntityAddress", "Load");
            persistence.AddRawParameter("@AddressID", this.AddressID);
            persistence.AddRawParameter("@AddressTypeID", this.AddressTypeID);
            persistence.AddRawParameter("@BusinessEntityBusinessEntityID", this.BusinessEntityBusinessEntityID);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(CodeFluentEntities.Bencher.Constants.CodeFluentEntities_BencherStoreName).Persistence;
            persistence.CreateStoredProcedureCommand("Person", "BusinessEntityAddress", "Save");
            persistence.AddRawParameter("@AddressID", this.AddressID);
            persistence.AddRawParameter("@AddressTypeID", this.AddressTypeID);
            persistence.AddRawParameter("@BusinessEntityID", this.BusinessEntityBusinessEntityID);
            persistence.AddRawParameter("@rowguid", this.Rowguid);
            persistence.AddRawParameter("@ModifiedDate", this.ModifiedDate);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(CodeFluentEntities.Bencher.Person.BusinessEntityAddress businessEntityAddress)
        {
            if ((businessEntityAddress == null))
            {
                return false;
            }
            bool ret = businessEntityAddress.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(CodeFluentEntities.Bencher.Person.BusinessEntityAddress businessEntityAddress)
        {
            bool ret = CodeFluentEntities.Bencher.Person.BusinessEntityAddress.Save(businessEntityAddress);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(CodeFluentEntities.Bencher.Person.BusinessEntityAddress businessEntityAddress)
        {
            if ((businessEntityAddress == null))
            {
                return false;
            }
            bool ret = businessEntityAddress.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("AddressID=");
            writer.Write(this.AddressID);
            writer.Write(",");
            writer.Write("AddressTypeID=");
            writer.Write(this.AddressTypeID);
            writer.Write(",");
            writer.Write("Rowguid=");
            writer.Write(this.Rowguid);
            writer.Write(",");
            writer.Write("ModifiedDate=");
            writer.Write(this.ModifiedDate);
            writer.Write(",");
            writer.Write("BusinessEntity=");
            if ((this._businessEntity != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._businessEntity)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_businessEntityBusinessEntityID=");
            writer.Write(this._businessEntityBusinessEntityID);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static CodeFluentEntities.Bencher.Person.BusinessEntityAddress LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            CodeFluentEntities.Bencher.Person.BusinessEntityAddress businessEntityAddress;
            System.Type[] types = new System.Type[] {
                    typeof(int),
                    typeof(int),
                    typeof(int)};
            object[] defaultValues = new object[] {
                    CodeFluentPersistence.DefaultInt32Value,
                    CodeFluentPersistence.DefaultInt32Value,
                    -1};
            object[] v = CodeFluentPersistence.ParseEntityKey(key, types, defaultValues);
            int var0;
            var0 = ((int)(v[0]));
            int var1;
            var1 = ((int)(v[1]));
            int var2;
            var2 = ((int)(v[2]));
            businessEntityAddress = CodeFluentEntities.Bencher.Person.BusinessEntityAddress.Load(var0, var1, var2);
            return businessEntityAddress;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public CodeFluentEntities.Bencher.Person.BusinessEntityAddress Clone(bool deep)
        {
            CodeFluentEntities.Bencher.Person.BusinessEntityAddress businessEntityAddress = new CodeFluentEntities.Bencher.Person.BusinessEntityAddress();
            this.CopyTo(businessEntityAddress, deep);
            return businessEntityAddress;
        }
        
        public CodeFluentEntities.Bencher.Person.BusinessEntityAddress Clone()
        {
            CodeFluentEntities.Bencher.Person.BusinessEntityAddress localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("BusinessEntityBusinessEntityID") == true))
            {
                this.BusinessEntityBusinessEntityID = ((int)(ConvertUtilities.ChangeType(dict["BusinessEntityBusinessEntityID"], typeof(int), -1)));
            }
            if ((dict.Contains("AddressTypeID") == true))
            {
                this.AddressTypeID = ((int)(ConvertUtilities.ChangeType(dict["AddressTypeID"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("AddressID") == true))
            {
                this.AddressID = ((int)(ConvertUtilities.ChangeType(dict["AddressID"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("Rowguid") == true))
            {
                this.Rowguid = ((System.Guid)(ConvertUtilities.ChangeType(dict["Rowguid"], typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            }
            if ((dict.Contains("ModifiedDate") == true))
            {
                this.ModifiedDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["ModifiedDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(CodeFluentEntities.Bencher.Person.BusinessEntityAddress businessEntityAddress, bool deep)
        {
            if ((businessEntityAddress == null))
            {
                throw new System.ArgumentNullException("businessEntityAddress");
            }
            businessEntityAddress.BusinessEntityBusinessEntityID = this.BusinessEntityBusinessEntityID;
            businessEntityAddress.AddressTypeID = this.AddressTypeID;
            businessEntityAddress.AddressID = this.AddressID;
            businessEntityAddress.Rowguid = this.Rowguid;
            businessEntityAddress.ModifiedDate = this.ModifiedDate;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, businessEntityAddress));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["BusinessEntityBusinessEntityID"] = this.BusinessEntityBusinessEntityID;
            dict["AddressTypeID"] = this.AddressTypeID;
            dict["AddressID"] = this.AddressID;
            dict["Rowguid"] = this.Rowguid;
            dict["ModifiedDate"] = this.ModifiedDate;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
    }
}
